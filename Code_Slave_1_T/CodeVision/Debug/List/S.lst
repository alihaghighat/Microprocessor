
AVRASM ver. 2.1.30  F:\darse\microprocess\PROJECT\PROJECT MICRO\Code_Slave_1_T\CodeVision\Debug\List\S.asm Fri Jul 23 17:21:28 2021

F:\darse\microprocess\PROJECT\PROJECT MICRO\Code_Slave_1_T\CodeVision\Debug\List\S.asm(1087): warning: Register r4 already defined by the .DEF directive
F:\darse\microprocess\PROJECT\PROJECT MICRO\Code_Slave_1_T\CodeVision\Debug\List\S.asm(1088): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2040060:
F:\darse\microprocess\PROJECT\PROJECT MICRO\Code_Slave_1_T\CodeVision\Debug\List\S.asm(1126): warning: .cseg .db misalignment - padding zero byte
000033 0001      	.DB  0x1
                 _0x2040000:
000034 4e2d
000035 4e41
000036 4900
000037 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\darse\microprocess\PROJECT\PROJECT MICRO\Code_Slave_1_T\CodeVision\Debug\List\S.asm(1129): warning: .cseg .db misalignment - padding zero byte
000038 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000039 0001      	.DW  0x01
00003a 0268      	.DW  __seed_G102
00003b 0066      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00003c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bff5      	OUT  MCUCR,R31
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 00a2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mlcd_portc.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;
                 ;#define LCD_Dir  DDRC			/* Define LCD data port direction */
                 ;#define LCD_Port PORTC			/* Define LCD data port */
                 ;#define RS 0					/* Define Register Select pin */
                 ;#define EN 1 					/* Define Enable signal pin */
                 ;
                 ;void LCD_Command(unsigned char cmnd) {
                 ; 0000 0003 void LCD_Command(unsigned char cmnd) {
                 
                 	.CSEG
                 _LCD_Command:
                 ; .FSTART _LCD_Command
                 ;    LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
000069 940e 0155 	CALL SUBOPT_0x0
                 ;	cmnd -> Y+0
                 ;	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
00006b 98a8      	CBI  0x15,0
                 ;	LCD_Port |= (1<<EN);		/* Enable pulse */
00006c c003      	RJMP _0x20A0001
                 ;	delay_us(1);
                 ;	LCD_Port &= ~ (1<<EN);
                 ;
                 ;	delay_us(200);
                 ;
                 ;	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
                 ;	LCD_Port |= (1<<EN);
                 ;	delay_us(1);
                 ;	LCD_Port &= ~ (1<<EN);
                 ;	delay_ms(2);
                 ;}
                 ; .FEND
                 ;
                 ;void LCD_Char(unsigned char data) {
                 _LCD_Char:
                 ; .FSTART _LCD_Char
                 ;	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
00006d 940e 0155 	CALL SUBOPT_0x0
                 ;	data -> Y+0
                 ;	LCD_Port |= (1<<RS);						  /* RS=1, data reg. */
00006f 9aa8      	SBI  0x15,0
                 ;	LCD_Port|= (1<<EN);
                 _0x20A0001:
000070 9aa9      	SBI  0x15,1
                 ;	delay_us(1);
                +
000071 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000072 958a     +DEC R24
000073 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ;	LCD_Port &= ~ (1<<EN);
000074 98a9      	CBI  0x15,1
                 ;
                 ;	delay_us(200);
                +
000075 e980     +LDI R24 , LOW ( 400 )
000076 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000077 9701     +SBIW R24 , 1
000078 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;
                 ;	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
000079 b3e5      	IN   R30,0x15
00007a 70ef      	ANDI R30,LOW(0xF)
00007b 2fae      	MOV  R26,R30
00007c 81e8      	LD   R30,Y
00007d 95e2      	SWAP R30
00007e 7fe0      	ANDI R30,0xF0
00007f 2bea      	OR   R30,R26
000080 bbe5      	OUT  0x15,R30
                 ;	LCD_Port |= (1<<EN);
000081 9aa9      	SBI  0x15,1
                 ;	delay_us(1);
                +
000082 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000083 958a     +DEC R24
000084 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ;	LCD_Port &= ~ (1<<EN);
000085 98a9      	CBI  0x15,1
                 ;	delay_ms(2);
000086 940e 015e 	CALL SUBOPT_0x1
                 ;}
000088 9621      	ADIW R28,1
000089 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_Init (void) {				/* LCD Initialize function */
                 _LCD_Init:
                 ; .FSTART _LCD_Init
                 ;	delay_ms(20);					/* LCD Power ON delay always >15ms */
00008a e1a4      	LDI  R26,LOW(20)
00008b e0b0      	LDI  R27,0
00008c 940e 0162 	CALL _delay_ms
                 ;
                 ;	LCD_Command(0x02);				/* send for 4 bit initialization of LCD  */
00008e e0a2      	LDI  R26,LOW(2)
00008f dfd9      	RCALL _LCD_Command
                 ;	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
000090 e2a8      	LDI  R26,LOW(40)
000091 dfd7      	RCALL _LCD_Command
                 ;	LCD_Command(0x0c);              /* Display on cursor off*/
000092 e0ac      	LDI  R26,LOW(12)
000093 dfd5      	RCALL _LCD_Command
                 ;	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
000094 e0a6      	LDI  R26,LOW(6)
000095 dfd3      	RCALL _LCD_Command
                 ;	LCD_Command(0x01);              /* Clear display screen*/
000096 e0a1      	LDI  R26,LOW(1)
000097 dfd1      	RCALL _LCD_Command
                 ;	delay_ms(2);
000098 940e 015e 	CALL SUBOPT_0x1
                 ;}
00009a 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_String (char *str)	{		/* Send string to LCD function */
                 ;	int i;
                 ;	for(i=0;str[i]!=0;i++) {		/* Send each char of string till the NULL */
                 ;	*str -> Y+2
                 ;	i -> R16,R17
                 ;		LCD_Char (str[i]);
                 ;	}
                 ;}
                 ;
                 ;void LCD_String_xy (char row, char pos, char *str) {	/* Send string to LCD with xy position */
                 ;	if (row == 0 && pos<16)
                 ;	row -> Y+3
                 ;	pos -> Y+2
                 ;	*str -> Y+0
                 ;	LCD_Command((pos & 0x0F)|0x80);						/* Command of first row and required position<16 */
                 ;	else if (row == 1 && pos<16)
                 ;	LCD_Command((pos & 0x0F)|0xC0);						/* Command of first row and required position<16 */
                 ;	LCD_String(str);									/* Call LCD string function */
                 ;}
                 ;
                 ;void LCD_Clear() {
                 _LCD_Clear:
                 ; .FSTART _LCD_Clear
                 ;	LCD_Command (0x01);		/* Clear display */
00009b e0a1      	LDI  R26,LOW(1)
00009c dfcc      	RCALL _LCD_Command
                 ;	delay_ms(2);
00009d 940e 015e 	CALL SUBOPT_0x1
                 ;	LCD_Command (0x80);		/* Cursor at home position */
00009f e8a0      	LDI  R26,LOW(128)
0000a0 dfc8      	RCALL _LCD_Command
                 ;}
0000a1 9508      	RET
                 ; .FEND
                 ;#include <string.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;int i;
                 ;char temperature[8];
                 ;
                 ;void main(void) {
                 ; 0000 000B void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 000C     DDRB.3 = 1;
0000a2 9abb      	SBI  0x17,3
                 ; 0000 000D     DDRD.7 = 1;
0000a3 9a8f      	SBI  0x11,7
                 ; 0000 000E 
                 ; 0000 000F     // SPI initialization
                 ; 0000 0010     SPCR |= (1<<SPE); // SPI Enable
0000a4 9a6e      	SBI  0xD,6
                 ; 0000 0011     SPCR |= (0<<CPOL); // SPI Clock Polarity: Low
0000a5 b1ed      	IN   R30,0xD
0000a6 b9ed      	OUT  0xD,R30
                 ; 0000 0012     SPCR |= (0<<CPHA); // SPI Clock Phase: Leading edge sample / Trailing Edge setup
0000a7 b1ed      	IN   R30,0xD
0000a8 b9ed      	OUT  0xD,R30
                 ; 0000 0013     SPCR |= (1<<SPR1) | (1<<SPR0); // SPI Clock Rate: f/128 = 62.5 KHz
0000a9 b1ed      	IN   R30,0xD
0000aa 60e3      	ORI  R30,LOW(0x3)
0000ab b9ed      	OUT  0xD,R30
                 ; 0000 0014     SPSR |= (0<<SPI2X);
0000ac b1ee      	IN   R30,0xE
0000ad b9ee      	OUT  0xE,R30
                 ; 0000 0015     SPCR |= (0<<DORD); // SPI Data Order: MSB First
0000ae b1ed      	IN   R30,0xD
0000af b9ed      	OUT  0xD,R30
                 ; 0000 0016     SPCR |= (0<<MSTR); // SPI Type: Slave
0000b0 b1ed      	IN   R30,0xD
0000b1 b9ed      	OUT  0xD,R30
                 ; 0000 0017 
                 ; 0000 0018     // Timer/Counter 0 initialization
                 ; 0000 0019     // Clock source: System Clock
                 ; 0000 001A     // Clock value: 125.000 kHz
                 ; 0000 001B     // Mode: Fast PWM top=0xFF
                 ; 0000 001C     // OC0 output: Non-Inverted PWM
                 ; 0000 001D     // Timer Period: 2.048 ms
                 ; 0000 001E     // Output Pulse(s):
                 ; 0000 001F     // OC0 Period: 2.048 ms Width: 0 us
                 ; 0000 0020     TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0000b2 e6eb      	LDI  R30,LOW(107)
0000b3 bfe3      	OUT  0x33,R30
                 ; 0000 0021     TCNT0=0x00;
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 bfe2      	OUT  0x32,R30
                 ; 0000 0022     OCR0=0x00;
0000b6 bfec      	OUT  0x3C,R30
                 ; 0000 0023 
                 ; 0000 0024     // Timer/Counter 2 initialization
                 ; 0000 0025     // Clock source: System Clock
                 ; 0000 0026     // Clock value: 125.000 kHz
                 ; 0000 0027     // Mode: Fast PWM top=0xFF
                 ; 0000 0028     // OC2 output: Non-Inverted PWM
                 ; 0000 0029     // Timer Period: 2.048 ms
                 ; 0000 002A     // Output Pulse(s):
                 ; 0000 002B     // OC2 Period: 2.048 ms Width: 0 us
                 ; 0000 002C     ASSR=0<<AS2;
0000b7 bde2      	OUT  0x22,R30
                 ; 0000 002D     TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
0000b8 e6ec      	LDI  R30,LOW(108)
0000b9 bde5      	OUT  0x25,R30
                 ; 0000 002E     TCNT2=0x00;
0000ba e0e0      	LDI  R30,LOW(0)
0000bb bde4      	OUT  0x24,R30
                 ; 0000 002F     OCR2=0x00;
0000bc bde3      	OUT  0x23,R30
                 ; 0000 0030 
                 ; 0000 0031     // LCD initialization
                 ; 0000 0032     DDRC = 0XFF;
0000bd efef      	LDI  R30,LOW(255)
0000be bbe4      	OUT  0x14,R30
                 ; 0000 0033     LCD_Init();
0000bf dfca      	RCALL _LCD_Init
                 ; 0000 0034 
                 ; 0000 0035     while(1) {
                 _0x11:
                 ; 0000 0036         LCD_Clear();
0000c0 dfda      	RCALL _LCD_Clear
                 ; 0000 0037         SPDR = '0'; // Slave data doesn't matter for master
0000c1 e3e0      	LDI  R30,LOW(48)
0000c2 b9ef      	OUT  0xF,R30
                 ; 0000 0038         while (((SPSR >> SPIF) & 1) == 0); // Wait till get data from master
                 _0x14:
0000c3 b1ee      	IN   R30,0xE
0000c4 e0f0      	LDI  R31,0
0000c5 940e 016e 	CALL __ASRW3
0000c7 940e 016c 	CALL __ASRW4
0000c9 70e1      	ANDI R30,LOW(0x1)
0000ca f3c1      	BREQ _0x14
                 ; 0000 0039         // sprintf(temperature,"T=%d", SPDR);
                 ; 0000 003A         itoa(SPDR, temperature); // We need ascii code to show them on LCD
0000cb b1ef      	IN   R30,0xF
0000cc e0f0      	LDI  R31,0
0000cd 93fa      	ST   -Y,R31
0000ce 93ea      	ST   -Y,R30
0000cf e6a0      	LDI  R26,LOW(_temperature)
0000d0 e0b2      	LDI  R27,HIGH(_temperature)
0000d1 940e 0127 	CALL _itoa
                 ; 0000 003B 
                 ; 0000 003C         for(i = 0; i < strlen(temperature); i++) {
0000d3 2444      	CLR  R4
0000d4 2455      	CLR  R5
                 _0x18:
0000d5 e6a0      	LDI  R26,LOW(_temperature)
0000d6 e0b2      	LDI  R27,HIGH(_temperature)
0000d7 940e 011b 	CALL _strlen
0000d9 164e      	CP   R4,R30
0000da 065f      	CPC  R5,R31
0000db f458      	BRSH _0x19
                 ; 0000 003D             LCD_Char(temperature[i]);
0000dc e6a0      	LDI  R26,LOW(_temperature)
0000dd e0b2      	LDI  R27,HIGH(_temperature)
0000de 0da4      	ADD  R26,R4
0000df 1db5      	ADC  R27,R5
0000e0 91ac      	LD   R26,X
0000e1 df8b      	RCALL _LCD_Char
                 ; 0000 003E         }
0000e2 01f2      	MOVW R30,R4
0000e3 9631      	ADIW R30,1
0000e4 012f      	MOVW R4,R30
0000e5 9731      	SBIW R30,1
0000e6 cfee      	RJMP _0x18
                 _0x19:
                 ; 0000 003F 
                 ; 0000 0040         if(SPDR > 25 )
0000e7 b1ef      	IN   R30,0xF
0000e8 31ea      	CPI  R30,LOW(0x1A)
0000e9 f090      	BRLO _0x1A
                 ; 0000 0041         {
                 ; 0000 0042         OCR0 = 100;           // COOOLER
0000ea e6e4      	LDI  R30,LOW(100)
0000eb bfec      	OUT  0x3C,R30
                 ; 0000 0043         if(SPDR>30)
0000ec b1ef      	IN   R30,0xF
0000ed 31ef      	CPI  R30,LOW(0x1F)
0000ee f010      	BRLO _0x1B
                 ; 0000 0044         {
                 ; 0000 0045         OCR0 = 150;
0000ef e9e6      	LDI  R30,LOW(150)
0000f0 bfec      	OUT  0x3C,R30
                 ; 0000 0046         }
                 ; 0000 0047         if(SPDR>35)
                 _0x1B:
0000f1 b1ef      	IN   R30,0xF
0000f2 32e4      	CPI  R30,LOW(0x24)
0000f3 f010      	BRLO _0x1C
                 ; 0000 0048         {
                 ; 0000 0049         OCR0 = 200;
0000f4 ece8      	LDI  R30,LOW(200)
0000f5 bfec      	OUT  0x3C,R30
                 ; 0000 004A         }
                 ; 0000 004B         if(SPDR>40)
                 _0x1C:
0000f6 b1ef      	IN   R30,0xF
0000f7 32e9      	CPI  R30,LOW(0x29)
0000f8 f010      	BRLO _0x1D
                 ; 0000 004C         {
                 ; 0000 004D         OCR0 = 250;
0000f9 efea      	LDI  R30,LOW(250)
0000fa bfec      	OUT  0x3C,R30
                 ; 0000 004E         }
                 ; 0000 004F         }else{OCR0 = 0;}
                 _0x1D:
0000fb c002      	RJMP _0x1E
                 _0x1A:
0000fc e0e0      	LDI  R30,LOW(0)
0000fd bfec      	OUT  0x3C,R30
                 _0x1E:
                 ; 0000 0050 
                 ; 0000 0051                  //HEATER
                 ; 0000 0052         if(SPDR<20)
0000fe b1ef      	IN   R30,0xF
0000ff 31e4      	CPI  R30,LOW(0x14)
000100 f490      	BRSH _0x1F
                 ; 0000 0053         {
                 ; 0000 0054         OCR2 = 100;
000101 e6e4      	LDI  R30,LOW(100)
000102 bde3      	OUT  0x23,R30
                 ; 0000 0055 
                 ; 0000 0056         if(SPDR>15)
000103 b1ef      	IN   R30,0xF
000104 31e0      	CPI  R30,LOW(0x10)
000105 f010      	BRLO _0x20
                 ; 0000 0057         {
                 ; 0000 0058         OCR2 = 150;
000106 e9e6      	LDI  R30,LOW(150)
000107 bde3      	OUT  0x23,R30
                 ; 0000 0059         }
                 ; 0000 005A         if(SPDR<10)
                 _0x20:
000108 b1ef      	IN   R30,0xF
000109 30ea      	CPI  R30,LOW(0xA)
00010a f410      	BRSH _0x21
                 ; 0000 005B         {
                 ; 0000 005C         OCR2 = 200;
00010b ece8      	LDI  R30,LOW(200)
00010c bde3      	OUT  0x23,R30
                 ; 0000 005D         }
                 ; 0000 005E 
                 ; 0000 005F         if(SPDR<5)
                 _0x21:
00010d b1ef      	IN   R30,0xF
00010e 30e5      	CPI  R30,LOW(0x5)
00010f f410      	BRSH _0x22
                 ; 0000 0060         {
                 ; 0000 0061         OCR2 = 250;
000110 efea      	LDI  R30,LOW(250)
000111 bde3      	OUT  0x23,R30
                 ; 0000 0062         }
                 ; 0000 0063 
                 ; 0000 0064         }else{OCR2 = 0;}
                 _0x22:
000112 c002      	RJMP _0x23
                 _0x1F:
000113 e0e0      	LDI  R30,LOW(0)
000114 bde3      	OUT  0x23,R30
                 _0x23:
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067 
                 ; 0000 0068 
                 ; 0000 0069 
                 ; 0000 006A 
                 ; 0000 006B         delay_ms(1000); // Some wait too see data, before LCD_Clear()
000115 eea8      	LDI  R26,LOW(1000)
000116 e0b3      	LDI  R27,HIGH(1000)
000117 940e 0162 	CALL _delay_ms
                 ; 0000 006C     }
000119 cfa6      	RJMP _0x11
                 ; 0000 006D }
                 _0x24:
00011a cfff      	RJMP _0x24
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00011b 93ba      	ST   -Y,R27
00011c 93aa      	ST   -Y,R26
00011d 91a9          ld   r26,y+
00011e 91b9          ld   r27,y+
00011f 27ee          clr  r30
000120 27ff          clr  r31
                 strlen0:
000121 916d          ld   r22,x+
000122 2366          tst  r22
000123 f011          breq strlen1
000124 9631          adiw r30,1
000125 cffb          rjmp strlen0
                 strlen1:
000126 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000127 93ba      	ST   -Y,R27
000128 93aa      	ST   -Y,R26
000129 91a9          ld   r26,y+
00012a 91b9          ld   r27,y+
00012b 91e9          ld   r30,y+
00012c 91f9          ld   r31,y+
00012d 9630          adiw r30,0
00012e f42a          brpl __itoa0
00012f 95e0          com  r30
000130 95f0          com  r31
000131 9631          adiw r30,1
000132 e26d          ldi  r22,'-'
000133 936d          st   x+,r22
                 __itoa0:
000134 94e8          clt
000135 e180          ldi  r24,low(10000)
000136 e297          ldi  r25,high(10000)
000137 d00d          rcall __itoa1
000138 ee88          ldi  r24,low(1000)
000139 e093          ldi  r25,high(1000)
00013a d00a          rcall __itoa1
00013b e684          ldi  r24,100
00013c 2799          clr  r25
00013d d007          rcall __itoa1
00013e e08a          ldi  r24,10
00013f d005          rcall __itoa1
000140 2f6e          mov  r22,r30
000141 d010          rcall __itoa5
000142 2766          clr  r22
000143 936c          st   x,r22
000144 9508          ret
                 
                 __itoa1:
000145 2766          clr	 r22
                 __itoa2:
000146 17e8          cp   r30,r24
000147 07f9          cpc  r31,r25
000148 f020          brlo __itoa3
000149 9563          inc  r22
00014a 1be8          sub  r30,r24
00014b 0bf9          sbc  r31,r25
00014c f7c9          brne __itoa2
                 __itoa3:
00014d 2366          tst  r22
00014e f411          brne __itoa4
00014f f016          brts __itoa5
000150 9508          ret
                 __itoa4:
000151 9468          set
                 __itoa5:
000152 5d60          subi r22,-0x30
000153 936d          st   x+,r22
000154 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _temperature:
000260           	.BYTE 0x8
                 __seed_G102:
000268           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000155 93aa      	ST   -Y,R26
000156 b3e5      	IN   R30,0x15
000157 70ef      	ANDI R30,LOW(0xF)
000158 2fae      	MOV  R26,R30
000159 81e8      	LD   R30,Y
00015a 7fe0      	ANDI R30,LOW(0xF0)
00015b 2bea      	OR   R30,R26
00015c bbe5      	OUT  0x15,R30
00015d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00015e e0a2      	LDI  R26,LOW(2)
00015f e0b0      	LDI  R27,0
000160 940c 0162 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
000162 9610      	adiw r26,0
000163 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000164 ed80     +LDI R24 , LOW ( 0x7D0 )
000165 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000166 9701     +SBIW R24 , 1
000167 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000168 95a8      	wdr
000169 9711      	sbiw r26,1
00016a f7c9      	brne __delay_ms0
                 __delay_ms1:
00016b 9508      	ret
                 
                 __ASRW4:
00016c 95f5      	ASR  R31
00016d 95e7      	ROR  R30
                 __ASRW3:
00016e 95f5      	ASR  R31
00016f 95e7      	ROR  R30
                 __ASRW2:
000170 95f5      	ASR  R31
000171 95e7      	ROR  R30
000172 95f5      	ASR  R31
000173 95e7      	ROR  R30
000174 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:  14 r23:   0 
r24:  21 r25:   9 r26:  29 r27:  13 r28:   2 r29:   1 r30: 114 r31:  16 
x  :   8 y  :  15 z  :   7 
Registers used: 16 out of 35 (45.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   6 and   :   0 andi  :   5 asr   :   4 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  10 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  11 
cbi   :   3 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   2 cpc   :   2 cpi   :   8 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  18 inc   :   1 jmp   :  23 ld    :  10 ldd   :   0 ldi   :  62 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   3 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   1 out   :  32 pop   :   0 push  :   0 rcall :  15 ret   :  10 
reti  :   0 rjmp  :   8 rol   :   0 ror   :   4 sbc   :   1 sbci  :   0 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  13 std   :   0 sts   :   0 sub   :   1 subi  :   1 swap  :   1 
tst   :   2 wdr   :   1 
Instructions used: 46 out of 116 (39.7%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002ea    708     38    746   32768   2.3%
[.dseg] 0x000060 0x00026c      0     12     12    2048   0.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
