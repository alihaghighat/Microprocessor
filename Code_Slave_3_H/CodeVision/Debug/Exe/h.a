;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <mlcd_portc.h>
;#include <io.h>
;#include <delay.h>
;
;#define LCD_Dir  DDRC			/* Define LCD data port direction */
;#define LCD_Port PORTC			/* Define LCD data port */
;#define RS 0					/* Define Register Select pin */
;#define EN 1 					/* Define Enable signal pin */
;
;void LCD_Command(unsigned char cmnd) {
; 0000 0003 void LCD_Command(unsigned char cmnd) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
;PCODE: $0000000F VOL: 0
;	cmnd -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	LCD_Port |= (1<<EN);		/* Enable pulse */
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	delay_us(1);
;PCODE: $0000001B VOL: 0
;	LCD_Port &= ~ (1<<EN);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;	delay_us(200);
;PCODE: $0000001E VOL: 0
;
;	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;	LCD_Port |= (1<<EN);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;	delay_us(1);
;PCODE: $00000028 VOL: 0
;	LCD_Port &= ~ (1<<EN);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;	delay_ms(2);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;}
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;void LCD_Char(unsigned char data) {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
;PCODE: $00000033 VOL: 0
;	data -> Y+0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;	LCD_Port |= (1<<RS);						  /* RS=1, data reg. */
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;	LCD_Port|= (1<<EN);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;	delay_us(1);
;PCODE: $0000003F VOL: 0
;	LCD_Port &= ~ (1<<EN);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;	delay_us(200);
;PCODE: $00000042 VOL: 0
;
;	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;	LCD_Port |= (1<<EN);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;	delay_us(1);
;PCODE: $0000004C VOL: 0
;	LCD_Port &= ~ (1<<EN);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;	delay_ms(2);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;}
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;
;void LCD_Init (void) {				/* LCD Initialize function */
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;	delay_ms(20);					/* LCD Power ON delay always >15ms */
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;	LCD_Command(0x02);				/* send for 4 bit initialization of LCD  */
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;	LCD_Command(0x0c);              /* Display on cursor off*/
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;	LCD_Command(0x01);              /* Clear display screen*/
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;	delay_ms(2);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;}
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;void LCD_String (char *str)	{		/* Send string to LCD function */
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;	int i;
;	for(i=0;str[i]!=0;i++) {		/* Send each char of string till the NULL */
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;	*str -> Y+2
;	i -> R16,R17
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;		LCD_Char (str[i]);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	}
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;}
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;void LCD_String_xy (char row, char pos, char *str) {	/* Send string to LCD with xy position */
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;	if (row == 0 && pos<16)
;PCODE: $0000008D VOL: 0
;	row -> Y+3
;	pos -> Y+2
;	*str -> Y+0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;	LCD_Command((pos & 0x0F)|0x80);						/* Command of first row and required position<16 */
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;	else if (row == 1 && pos<16)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;	LCD_Command((pos & 0x0F)|0xC0);						/* Command of first row and required position<16 */
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;	LCD_String(str);									/* Call LCD string function */
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;}
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;void LCD_Clear() {
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;	LCD_Command (0x01);		/* Clear display */
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;	delay_ms(2);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;	LCD_Command (0x80);		/* Cursor at home position */
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;}
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;#include <string.h>
;#include <stdio.h>
;#include <stdlib.h>
;
;int i;
;char temperature[8];
;
;void main(void) {
; 0000 000B void main(void) {
;PCODE: $000000C0 VOL: 0
; 0000 000C 
; 0000 000D 
; 0000 000E     // SPI initialization
; 0000 000F     SPCR |= (1<<SPE); // SPI Enable
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0010     SPCR |= (0<<CPOL); // SPI Clock Polarity: Low
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0011     SPCR |= (0<<CPHA); // SPI Clock Phase: Leading edge sample / Trailing Edge setup
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0012     SPCR |= (1<<SPR1) | (1<<SPR0); // SPI Clock Rate: f/128 = 62.5 KHz
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0013     SPSR |= (0<<SPI2X);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0014     SPCR |= (0<<DORD); // SPI Data Order: MSB First
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0015     SPCR |= (0<<MSTR); // SPI Type: Slave
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0016 
; 0000 0017     // Timer/Counter 0 initialization
; 0000 0018     // Clock source: System Clock
; 0000 0019     // Clock value: 125.000 kHz
; 0000 001A     // Mode: Fast PWM top=0xFF
; 0000 001B     // OC0 output: Non-Inverted PWM
; 0000 001C     // Timer Period: 2.048 ms
; 0000 001D     // Output Pulse(s):
; 0000 001E     // OC0 Period: 2.048 ms Width: 0 us
; 0000 001F     TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0020     TCNT0=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0021     OCR0=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0022 
; 0000 0023     // Timer/Counter 2 initialization
; 0000 0024     // Clock source: System Clock
; 0000 0025     // Clock value: 125.000 kHz
; 0000 0026     // Mode: Fast PWM top=0xFF
; 0000 0027     // OC2 output: Non-Inverted PWM
; 0000 0028     // Timer Period: 2.048 ms
; 0000 0029     // Output Pulse(s):
; 0000 002A     // OC2 Period: 2.048 ms Width: 0 us
; 0000 002B     ASSR=0<<AS2;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 002C     TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 002D     TCNT2=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 002E     OCR2=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 002F 
; 0000 0030     // LCD initialization
; 0000 0031     DDRC = 0XFF;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0032     LCD_Init();
;PCODE: $000000E5 VOL: 0
; 0000 0033 
; 0000 0034     LCD_String("humidity");
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0035     delay_ms(300);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0036     LCD_Clear();
;PCODE: $000000EB VOL: 0
; 0000 0037 
; 0000 0038     while(1) {
;PCODE: $000000EC VOL: 0
; 0000 0039         LCD_Clear();
;PCODE: $000000ED VOL: 0
; 0000 003A         SPDR = '0'; // Slave data doesn't matter for master
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 003B         while (((SPSR >> SPIF) & 1) == 0); // Wait till get data from master
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 003C         // sprintf(temperature,"T=%d", SPDR);
; 0000 003D         itoa(SPDR, temperature); // We need ascii code to show them on LCD
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 003E 
; 0000 003F         if(SPDR>=30 && SPDR<=50)
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0040         {
; 0000 0041 
; 0000 0042         LCD_String("'(:'");
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0043 
; 0000 0044         }else{LCD_Clear(); LCD_String("'):'");}
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0045 
; 0000 0046 
; 0000 0047 
; 0000 0048 
; 0000 0049         delay_ms(500); // Some wait too see data, before LCD_Clear()
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 004A     }
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 004B }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0

	.DSEG
_0xD:
	.BYTE 0x13
