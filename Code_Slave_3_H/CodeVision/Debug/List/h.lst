
AVRASM ver. 2.1.30  F:\darse\microprocess\PROJECT\PROJECT\Code_Slave_3_H\CodeVision\Debug\List\h.asm Tue Jul 20 21:15:07 2021

F:\darse\microprocess\PROJECT\PROJECT\Code_Slave_3_H\CodeVision\Debug\List\h.asm(1087): warning: Register r4 already defined by the .DEF directive
F:\darse\microprocess\PROJECT\PROJECT\Code_Slave_3_H\CodeVision\Debug\List\h.asm(1088): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0050 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 7568
000034 696d
000035 6964
000036 7974      	.DB  0x68,0x75,0x6D,0x69,0x64,0x69,0x74,0x79
000037 2700
000038 3a28
000039 0027
00003a 2927      	.DB  0x0,0x27,0x28,0x3A,0x27,0x0,0x27,0x29
00003b 273a
F:\darse\microprocess\PROJECT\PROJECT\Code_Slave_3_H\CodeVision\Debug\List\h.asm(1128): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x3A,0x27,0x0
                 _0x2040060:
F:\darse\microprocess\PROJECT\PROJECT\Code_Slave_3_H\CodeVision\Debug\List\h.asm(1130): warning: .cseg .db misalignment - padding zero byte
00003d 0001      	.DB  0x1
                 _0x2040000:
00003e 4e2d
00003f 4e41
000040 4900
000041 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\darse\microprocess\PROJECT\PROJECT\Code_Slave_3_H\CodeVision\Debug\List\h.asm(1133): warning: .cseg .db misalignment - padding zero byte
000042 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000043 0009      	.DW  0x09
000044 0260      	.DW  _0xD
000045 0066      	.DW  _0x0*2
                 
000046 0005      	.DW  0x05
000047 0269      	.DW  _0xD+9
000048 006f      	.DW  _0x0*2+9
                 
000049 0005      	.DW  0x05
00004a 026e      	.DW  _0xD+14
00004b 0074      	.DW  _0x0*2+14
                 
00004c 0001      	.DW  0x01
00004d 027b      	.DW  __seed_G102
00004e 007a      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00004f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000050 94f8      	CLI
000051 27ee      	CLR  R30
000052 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000053 e0f1      	LDI  R31,1
000054 bff5      	OUT  MCUCR,R31
000055 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000056 e08d      	LDI  R24,(14-2)+1
000057 e0a2      	LDI  R26,2
000058 27bb      	CLR  R27
                 __CLEAR_REG:
000059 93ed      	ST   X+,R30
00005a 958a      	DEC  R24
00005b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005f 93ed      	ST   X+,R30
000060 9701      	SBIW R24,1
000061 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000062 e8e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000063 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000064 9185      	LPM  R24,Z+
000065 9195      	LPM  R25,Z+
000066 9700      	SBIW R24,0
000067 f061      	BREQ __GLOBAL_INI_END
000068 91a5      	LPM  R26,Z+
000069 91b5      	LPM  R27,Z+
00006a 9005      	LPM  R0,Z+
00006b 9015      	LPM  R1,Z+
00006c 01bf      	MOVW R22,R30
00006d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006e 9005      	LPM  R0,Z+
00006f 920d      	ST   X+,R0
000070 9701      	SBIW R24,1
000071 f7e1      	BRNE __GLOBAL_INI_LOOP
000072 01fb      	MOVW R30,R22
000073 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000074 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000075 bfed      	OUT  SPL,R30
000076 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000077 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000078 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000079 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007a 940c 00d1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mlcd_portc.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;
                 ;#define LCD_Dir  DDRC			/* Define LCD data port direction */
                 ;#define LCD_Port PORTC			/* Define LCD data port */
                 ;#define RS 0					/* Define Register Select pin */
                 ;#define EN 1 					/* Define Enable signal pin */
                 ;
                 ;void LCD_Command(unsigned char cmnd) {
                 ; 0000 0003 void LCD_Command(unsigned char cmnd) {
                 
                 	.CSEG
                 _LCD_Command:
                 ; .FSTART _LCD_Command
                 ;    LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
00007c 940e 014a 	CALL SUBOPT_0x0
                 ;	cmnd -> Y+0
                 ;	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
00007e 98a8      	CBI  0x15,0
                 ;	LCD_Port |= (1<<EN);		/* Enable pulse */
00007f c003      	RJMP _0x20A0001
                 ;	delay_us(1);
                 ;	LCD_Port &= ~ (1<<EN);
                 ;
                 ;	delay_us(200);
                 ;
                 ;	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
                 ;	LCD_Port |= (1<<EN);
                 ;	delay_us(1);
                 ;	LCD_Port &= ~ (1<<EN);
                 ;	delay_ms(2);
                 ;}
                 ; .FEND
                 ;
                 ;void LCD_Char(unsigned char data) {
                 _LCD_Char:
                 ; .FSTART _LCD_Char
                 ;	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
000080 940e 014a 	CALL SUBOPT_0x0
                 ;	data -> Y+0
                 ;	LCD_Port |= (1<<RS);						  /* RS=1, data reg. */
000082 9aa8      	SBI  0x15,0
                 ;	LCD_Port|= (1<<EN);
                 _0x20A0001:
000083 9aa9      	SBI  0x15,1
                 ;	delay_us(1);
                +
000084 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000085 958a     +DEC R24
000086 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ;	LCD_Port &= ~ (1<<EN);
000087 98a9      	CBI  0x15,1
                 ;
                 ;	delay_us(200);
                +
000088 e980     +LDI R24 , LOW ( 400 )
000089 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00008a 9701     +SBIW R24 , 1
00008b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;
                 ;	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
00008c b3e5      	IN   R30,0x15
00008d 70ef      	ANDI R30,LOW(0xF)
00008e 2fae      	MOV  R26,R30
00008f 81e8      	LD   R30,Y
000090 95e2      	SWAP R30
000091 7fe0      	ANDI R30,0xF0
000092 2bea      	OR   R30,R26
000093 bbe5      	OUT  0x15,R30
                 ;	LCD_Port |= (1<<EN);
000094 9aa9      	SBI  0x15,1
                 ;	delay_us(1);
                +
000095 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000096 958a     +DEC R24
000097 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ;	LCD_Port &= ~ (1<<EN);
000098 98a9      	CBI  0x15,1
                 ;	delay_ms(2);
000099 940e 0153 	CALL SUBOPT_0x1
                 ;}
00009b 9621      	ADIW R28,1
00009c 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_Init (void) {				/* LCD Initialize function */
                 _LCD_Init:
                 ; .FSTART _LCD_Init
                 ;	delay_ms(20);					/* LCD Power ON delay always >15ms */
00009d e1a4      	LDI  R26,LOW(20)
00009e e0b0      	LDI  R27,0
00009f 940e 0157 	CALL _delay_ms
                 ;
                 ;	LCD_Command(0x02);				/* send for 4 bit initialization of LCD  */
0000a1 e0a2      	LDI  R26,LOW(2)
0000a2 dfd9      	RCALL _LCD_Command
                 ;	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
0000a3 e2a8      	LDI  R26,LOW(40)
0000a4 dfd7      	RCALL _LCD_Command
                 ;	LCD_Command(0x0c);              /* Display on cursor off*/
0000a5 e0ac      	LDI  R26,LOW(12)
0000a6 dfd5      	RCALL _LCD_Command
                 ;	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
0000a7 e0a6      	LDI  R26,LOW(6)
0000a8 dfd3      	RCALL _LCD_Command
                 ;	LCD_Command(0x01);              /* Clear display screen*/
0000a9 e0a1      	LDI  R26,LOW(1)
0000aa dfd1      	RCALL _LCD_Command
                 ;	delay_ms(2);
0000ab 940e 0153 	CALL SUBOPT_0x1
                 ;}
0000ad 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_String (char *str)	{		/* Send string to LCD function */
                 _LCD_String:
                 ; .FSTART _LCD_String
                 ;	int i;
                 ;	for(i=0;str[i]!=0;i++) {		/* Send each char of string till the NULL */
0000ae 93ba      	ST   -Y,R27
0000af 93aa      	ST   -Y,R26
0000b0 931a      	ST   -Y,R17
0000b1 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	i -> R16,R17
                +
0000b2 e000     +LDI R16 , LOW ( 0 )
0000b3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
0000b4 01f8      	MOVW R30,R16
0000b5 81aa      	LDD  R26,Y+2
0000b6 81bb      	LDD  R27,Y+2+1
0000b7 0fae      	ADD  R26,R30
0000b8 1fbf      	ADC  R27,R31
0000b9 91ec      	LD   R30,X
0000ba 30e0      	CPI  R30,0
0000bb f051      	BREQ _0x5
                 ;		LCD_Char (str[i]);
0000bc 01f8      	MOVW R30,R16
0000bd 81aa      	LDD  R26,Y+2
0000be 81bb      	LDD  R27,Y+2+1
0000bf 0fae      	ADD  R26,R30
0000c0 1fbf      	ADC  R27,R31
0000c1 91ac      	LD   R26,X
0000c2 dfbd      	RCALL _LCD_Char
                 ;	}
                +
0000c3 5f0f     +SUBI R16 , LOW ( - 1 )
0000c4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000c5 cfee      	RJMP _0x4
                 _0x5:
                 ;}
0000c6 8119      	LDD  R17,Y+1
0000c7 8108      	LDD  R16,Y+0
0000c8 9624      	ADIW R28,4
0000c9 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_String_xy (char row, char pos, char *str) {	/* Send string to LCD with xy position */
                 ;	if (row == 0 && pos<16)
                 ;	row -> Y+3
                 ;	pos -> Y+2
                 ;	*str -> Y+0
                 ;	LCD_Command((pos & 0x0F)|0x80);						/* Command of first row and required position<16 */
                 ;	else if (row == 1 && pos<16)
                 ;	LCD_Command((pos & 0x0F)|0xC0);						/* Command of first row and required position<16 */
                 ;	LCD_String(str);									/* Call LCD string function */
                 ;}
                 ;
                 ;void LCD_Clear() {
                 _LCD_Clear:
                 ; .FSTART _LCD_Clear
                 ;	LCD_Command (0x01);		/* Clear display */
0000ca e0a1      	LDI  R26,LOW(1)
0000cb dfb0      	RCALL _LCD_Command
                 ;	delay_ms(2);
0000cc 940e 0153 	CALL SUBOPT_0x1
                 ;	LCD_Command (0x80);		/* Cursor at home position */
0000ce e8a0      	LDI  R26,LOW(128)
0000cf dfac      	RCALL _LCD_Command
                 ;}
0000d0 9508      	RET
                 ; .FEND
                 ;#include <string.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;int i;
                 ;char temperature[8];
                 ;
                 ;void main(void) {
                 ; 0000 000B void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 000C 
                 ; 0000 000D 
                 ; 0000 000E     // SPI initialization
                 ; 0000 000F     SPCR |= (1<<SPE); // SPI Enable
0000d1 9a6e      	SBI  0xD,6
                 ; 0000 0010     SPCR |= (0<<CPOL); // SPI Clock Polarity: Low
0000d2 b1ed      	IN   R30,0xD
0000d3 b9ed      	OUT  0xD,R30
                 ; 0000 0011     SPCR |= (0<<CPHA); // SPI Clock Phase: Leading edge sample / Trailing Edge setup
0000d4 b1ed      	IN   R30,0xD
0000d5 b9ed      	OUT  0xD,R30
                 ; 0000 0012     SPCR |= (1<<SPR1) | (1<<SPR0); // SPI Clock Rate: f/128 = 62.5 KHz
0000d6 b1ed      	IN   R30,0xD
0000d7 60e3      	ORI  R30,LOW(0x3)
0000d8 b9ed      	OUT  0xD,R30
                 ; 0000 0013     SPSR |= (0<<SPI2X);
0000d9 b1ee      	IN   R30,0xE
0000da b9ee      	OUT  0xE,R30
                 ; 0000 0014     SPCR |= (0<<DORD); // SPI Data Order: MSB First
0000db b1ed      	IN   R30,0xD
0000dc b9ed      	OUT  0xD,R30
                 ; 0000 0015     SPCR |= (0<<MSTR); // SPI Type: Slave
0000dd b1ed      	IN   R30,0xD
0000de b9ed      	OUT  0xD,R30
                 ; 0000 0016 
                 ; 0000 0017     // Timer/Counter 0 initialization
                 ; 0000 0018     // Clock source: System Clock
                 ; 0000 0019     // Clock value: 125.000 kHz
                 ; 0000 001A     // Mode: Fast PWM top=0xFF
                 ; 0000 001B     // OC0 output: Non-Inverted PWM
                 ; 0000 001C     // Timer Period: 2.048 ms
                 ; 0000 001D     // Output Pulse(s):
                 ; 0000 001E     // OC0 Period: 2.048 ms Width: 0 us
                 ; 0000 001F     TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0000df e6eb      	LDI  R30,LOW(107)
0000e0 bfe3      	OUT  0x33,R30
                 ; 0000 0020     TCNT0=0x00;
0000e1 e0e0      	LDI  R30,LOW(0)
0000e2 bfe2      	OUT  0x32,R30
                 ; 0000 0021     OCR0=0x00;
0000e3 bfec      	OUT  0x3C,R30
                 ; 0000 0022 
                 ; 0000 0023     // Timer/Counter 2 initialization
                 ; 0000 0024     // Clock source: System Clock
                 ; 0000 0025     // Clock value: 125.000 kHz
                 ; 0000 0026     // Mode: Fast PWM top=0xFF
                 ; 0000 0027     // OC2 output: Non-Inverted PWM
                 ; 0000 0028     // Timer Period: 2.048 ms
                 ; 0000 0029     // Output Pulse(s):
                 ; 0000 002A     // OC2 Period: 2.048 ms Width: 0 us
                 ; 0000 002B     ASSR=0<<AS2;
0000e4 bde2      	OUT  0x22,R30
                 ; 0000 002C     TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
0000e5 e6ec      	LDI  R30,LOW(108)
0000e6 bde5      	OUT  0x25,R30
                 ; 0000 002D     TCNT2=0x00;
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 bde4      	OUT  0x24,R30
                 ; 0000 002E     OCR2=0x00;
0000e9 bde3      	OUT  0x23,R30
                 ; 0000 002F 
                 ; 0000 0030     // LCD initialization
                 ; 0000 0031     DDRC = 0XFF;
0000ea efef      	LDI  R30,LOW(255)
0000eb bbe4      	OUT  0x14,R30
                 ; 0000 0032     LCD_Init();
0000ec dfb0      	RCALL _LCD_Init
                 ; 0000 0033 
                 ; 0000 0034     LCD_String("humidity");
                +
0000ed e6a0     +LDI R26 , LOW ( _0xD + ( 0 ) )
0000ee e0b2     +LDI R27 , HIGH ( _0xD + ( 0 ) )
                 	__POINTW2MN _0xD,0
0000ef dfbe      	RCALL _LCD_String
                 ; 0000 0035     delay_ms(300);
0000f0 e2ac      	LDI  R26,LOW(300)
0000f1 e0b1      	LDI  R27,HIGH(300)
0000f2 940e 0157 	CALL _delay_ms
                 ; 0000 0036     LCD_Clear();
0000f4 dfd5      	RCALL _LCD_Clear
                 ; 0000 0037 
                 ; 0000 0038     while(1) {
                 _0xE:
                 ; 0000 0039         LCD_Clear();
0000f5 dfd4      	RCALL _LCD_Clear
                 ; 0000 003A         SPDR = '0'; // Slave data doesn't matter for master
0000f6 e3e0      	LDI  R30,LOW(48)
0000f7 b9ef      	OUT  0xF,R30
                 ; 0000 003B         while (((SPSR >> SPIF) & 1) == 0); // Wait till get data from master
                 _0x11:
0000f8 b1ee      	IN   R30,0xE
0000f9 e0f0      	LDI  R31,0
0000fa 940e 0163 	CALL __ASRW3
0000fc 940e 0161 	CALL __ASRW4
0000fe 70e1      	ANDI R30,LOW(0x1)
0000ff f3c1      	BREQ _0x11
                 ; 0000 003C         // sprintf(temperature,"T=%d", SPDR);
                 ; 0000 003D         itoa(SPDR, temperature); // We need ascii code to show them on LCD
000100 b1ef      	IN   R30,0xF
000101 e0f0      	LDI  R31,0
000102 93fa      	ST   -Y,R31
000103 93ea      	ST   -Y,R30
000104 e7a3      	LDI  R26,LOW(_temperature)
000105 e0b2      	LDI  R27,HIGH(_temperature)
000106 940e 011c 	CALL _itoa
                 ; 0000 003E 
                 ; 0000 003F         if(SPDR>=30 && SPDR<=50)
000108 b1ef      	IN   R30,0xF
000109 31ee      	CPI  R30,LOW(0x1E)
00010a f018      	BRLO _0x15
00010b b1ef      	IN   R30,0xF
00010c 33e3      	CPI  R30,LOW(0x33)
00010d f008      	BRLO _0x16
                 _0x15:
00010e c003      	RJMP _0x14
                 _0x16:
                 ; 0000 0040         {
                 ; 0000 0041 
                 ; 0000 0042         LCD_String("'(:'");
                +
00010f e6a9     +LDI R26 , LOW ( _0xD + ( 9 ) )
000110 e0b2     +LDI R27 , HIGH ( _0xD + ( 9 ) )
                 	__POINTW2MN _0xD,9
000111 c003      	RJMP _0x1A
                 ; 0000 0043 
                 ; 0000 0044         }else{LCD_Clear(); LCD_String("'):'");}
                 _0x14:
000112 dfb7      	RCALL _LCD_Clear
                +
000113 e6ae     +LDI R26 , LOW ( _0xD + ( 14 ) )
000114 e0b2     +LDI R27 , HIGH ( _0xD + ( 14 ) )
                 	__POINTW2MN _0xD,14
                 _0x1A:
000115 df98      	RCALL _LCD_String
                 ; 0000 0045 
                 ; 0000 0046 
                 ; 0000 0047 
                 ; 0000 0048 
                 ; 0000 0049         delay_ms(500); // Some wait too see data, before LCD_Clear()
000116 efa4      	LDI  R26,LOW(500)
000117 e0b1      	LDI  R27,HIGH(500)
000118 940e 0157 	CALL _delay_ms
                 ; 0000 004A     }
00011a cfda      	RJMP _0xE
                 ; 0000 004B }
                 _0x18:
00011b cfff      	RJMP _0x18
                 ; .FEND
                 
                 	.DSEG
                 _0xD:
000260           	.BYTE 0x13
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00011c 93ba      	ST   -Y,R27
00011d 93aa      	ST   -Y,R26
00011e 91a9          ld   r26,y+
00011f 91b9          ld   r27,y+
000120 91e9          ld   r30,y+
000121 91f9          ld   r31,y+
000122 9630          adiw r30,0
000123 f42a          brpl __itoa0
000124 95e0          com  r30
000125 95f0          com  r31
000126 9631          adiw r30,1
000127 e26d          ldi  r22,'-'
000128 936d          st   x+,r22
                 __itoa0:
000129 94e8          clt
00012a e180          ldi  r24,low(10000)
00012b e297          ldi  r25,high(10000)
00012c d00d          rcall __itoa1
00012d ee88          ldi  r24,low(1000)
00012e e093          ldi  r25,high(1000)
00012f d00a          rcall __itoa1
000130 e684          ldi  r24,100
000131 2799          clr  r25
000132 d007          rcall __itoa1
000133 e08a          ldi  r24,10
000134 d005          rcall __itoa1
000135 2f6e          mov  r22,r30
000136 d010          rcall __itoa5
000137 2766          clr  r22
000138 936c          st   x,r22
000139 9508          ret
                 
                 __itoa1:
00013a 2766          clr	 r22
                 __itoa2:
00013b 17e8          cp   r30,r24
00013c 07f9          cpc  r31,r25
00013d f020          brlo __itoa3
00013e 9563          inc  r22
00013f 1be8          sub  r30,r24
000140 0bf9          sbc  r31,r25
000141 f7c9          brne __itoa2
                 __itoa3:
000142 2366          tst  r22
000143 f411          brne __itoa4
000144 f016          brts __itoa5
000145 9508          ret
                 __itoa4:
000146 9468          set
                 __itoa5:
000147 5d60          subi r22,-0x30
000148 936d          st   x+,r22
000149 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _temperature:
000273           	.BYTE 0x8
                 __seed_G102:
00027b           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00014a 93aa      	ST   -Y,R26
00014b b3e5      	IN   R30,0x15
00014c 70ef      	ANDI R30,LOW(0xF)
00014d 2fae      	MOV  R26,R30
00014e 81e8      	LD   R30,Y
00014f 7fe0      	ANDI R30,LOW(0xF0)
000150 2bea      	OR   R30,R26
000151 bbe5      	OUT  0x15,R30
000152 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000153 e0a2      	LDI  R26,LOW(2)
000154 e0b0      	LDI  R27,0
000155 940c 0157 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
000157 9610      	adiw r26,0
000158 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000159 ed80     +LDI R24 , LOW ( 0x7D0 )
00015a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00015b 9701     +SBIW R24 , 1
00015c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00015d 95a8      	wdr
00015e 9711      	sbiw r26,1
00015f f7c9      	brne __delay_ms0
                 __delay_ms1:
000160 9508      	ret
                 
                 __ASRW4:
000161 95f5      	ASR  R31
000162 95e7      	ROR  R30
                 __ASRW3:
000163 95f5      	ASR  R31
000164 95e7      	ROR  R30
                 __ASRW2:
000165 95f5      	ASR  R31
000166 95e7      	ROR  R30
000167 95f5      	ASR  R31
000168 95e7      	ROR  R30
000169 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  21 r25:   9 r26:  33 r27:  17 r28:   3 r29:   1 r30:  81 r31:  16 
x  :   8 y  :  21 z  :   7 
Registers used: 16 out of 35 (45.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   5 and   :   0 andi  :   5 asr   :   4 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  10 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  11 
cbi   :   3 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   1 cpc   :   1 cpi   :   3 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  12 inc   :   1 jmp   :  23 ld    :   8 ldd   :   6 ldi   :  58 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   3 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   1 out   :  22 pop   :   0 push  :   0 rcall :  19 ret   :  10 
reti  :   0 rjmp  :   7 rol   :   0 ror   :   4 sbc   :   1 sbci  :   1 
sbi   :   4 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  15 std   :   0 sts   :   0 sub   :   1 subi  :   2 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 47 out of 116 (40.5%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002d4    648     76    724   32768   2.2%
[.dseg] 0x000060 0x00027f      0     31     31    2048   1.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
