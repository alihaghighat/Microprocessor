
AVRASM ver. 2.1.30  C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm Sat Jul 17 22:09:11 2021

C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm(1091): warning: Register r9 already defined by the .DEF directive
C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm(1092): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _j=R6
                 	.DEF _j_msb=R7
                 	.DEF _pressed_key_integer=R9
                 	.DEF _ignore=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0342 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0xD:
000033 000f
000034 0d0e
000035 0201
000036 0c03      	.DB  0xF,0x0,0xE,0xD,0x1,0x2,0x3,0xC
000037 0504
000038 0b06
000039 0807
00003a 0a09      	.DB  0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xA
                 _0x0:
00003b 6e45
00003c 6574
00003d 2072
00003e 6150      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x50,0x61
00003f 7373
000040 6f77
000041 6472
000042 003a      	.DB  0x73,0x73,0x77,0x6F,0x72,0x64,0x3A,0x0
000043 7953
000044 7473
000045 6d65
000046 5320      	.DB  0x53,0x79,0x73,0x74,0x65,0x6D,0x20,0x53
000047 6174
000048 7472
000049 6465
C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm(1136): warning: .cseg .db misalignment - padding zero byte
00004a 0000      	.DB  0x74,0x61,0x72,0x74,0x65,0x64,0x0
                 _0x2040060:
C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm(1138): warning: .cseg .db misalignment - padding zero byte
00004b 0001      	.DB  0x1
                 _0x2040000:
00004c 4e2d
00004d 4e41
00004e 4900
00004f 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\MohammadReza\Desktop\PROJECT\Code_Master\CodeVision\Debug\List\M.asm(1141): warning: .cseg .db misalignment - padding zero byte
000050 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000051 0010      	.DW  0x10
000052 027f      	.DW  _table
000053 0066      	.DW  _0xD*2
                 
000054 0010      	.DW  0x10
000055 0260      	.DW  _0x36
000056 0076      	.DW  _0x0*2
                 
000057 000f      	.DW  0x0F
000058 0270      	.DW  _0x36+16
000059 0086      	.DW  _0x0*2+16
                 
00005a 0001      	.DW  0x01
00005b 02ac      	.DW  __seed_G102
00005c 0096      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00005d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005e 94f8      	CLI
00005f 27ee      	CLR  R30
000060 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000061 e0f1      	LDI  R31,1
000062 bff5      	OUT  MCUCR,R31
000063 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000064 e08d      	LDI  R24,(14-2)+1
000065 e0a2      	LDI  R26,2
000066 27bb      	CLR  R27
                 __CLEAR_REG:
000067 93ed      	ST   X+,R30
000068 958a      	DEC  R24
000069 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006b e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006d 93ed      	ST   X+,R30
00006e 9701      	SBIW R24,1
00006f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000070 eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000071 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000072 9185      	LPM  R24,Z+
000073 9195      	LPM  R25,Z+
000074 9700      	SBIW R24,0
000075 f061      	BREQ __GLOBAL_INI_END
000076 91a5      	LPM  R26,Z+
000077 91b5      	LPM  R27,Z+
000078 9005      	LPM  R0,Z+
000079 9015      	LPM  R1,Z+
00007a 01bf      	MOVW R22,R30
00007b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007c 9005      	LPM  R0,Z+
00007d 920d      	ST   X+,R0
00007e 9701      	SBIW R24,1
00007f f7e1      	BRNE __GLOBAL_INI_LOOP
000080 01fb      	MOVW R30,R22
000081 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000082 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000083 bfed      	OUT  SPL,R30
000084 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000085 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000086 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000087 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000088 940c 022f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mlcd_portd.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;
                 ;#define LCD_Dir  DDRD			/* Define LCD data port direction */
                 ;#define LCD_Port PORTD			/* Define LCD data port */
                 ;#define RS 0					/* Define Register Select pin */
                 ;#define EN 1 					/* Define Enable signal pin */
                 ;
                 ;void LCD_Command(unsigned char cmnd) {
                 ; 0000 0003 void LCD_Command(unsigned char cmnd) {
                 
                 	.CSEG
                 _LCD_Command:
                 ; .FSTART _LCD_Command
                 ;    LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
00008a 940e 038b 	CALL SUBOPT_0x0
                 ;	cmnd -> Y+0
                 ;	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
00008c 9890      	CBI  0x12,0
                 ;	LCD_Port |= (1<<EN);		/* Enable pulse */
00008d c003      	RJMP _0x20A0005
                 ;	delay_us(1);
                 ;	LCD_Port &= ~ (1<<EN);
                 ;
                 ;	delay_us(200);
                 ;
                 ;	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
                 ;	LCD_Port |= (1<<EN);
                 ;	delay_us(1);
                 ;	LCD_Port &= ~ (1<<EN);
                 ;	delay_ms(2);
                 ;}
                 ; .FEND
                 ;
                 ;void LCD_Char(unsigned char data) {
                 _LCD_Char:
                 ; .FSTART _LCD_Char
                 ;	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
00008e 940e 038b 	CALL SUBOPT_0x0
                 ;	data -> Y+0
                 ;	LCD_Port |= (1<<RS);						  /* RS=1, data reg. */
000090 9a90      	SBI  0x12,0
                 ;	LCD_Port|= (1<<EN);
                 _0x20A0005:
000091 9a91      	SBI  0x12,1
                 ;	delay_us(1);
                +
000092 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000093 958a     +DEC R24
000094 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ;	LCD_Port &= ~ (1<<EN);
000095 9891      	CBI  0x12,1
                 ;
                 ;	delay_us(200);
                +
000096 e980     +LDI R24 , LOW ( 400 )
000097 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000098 9701     +SBIW R24 , 1
000099 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;
                 ;	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
00009a b3e2      	IN   R30,0x12
00009b 70ef      	ANDI R30,LOW(0xF)
00009c 2fae      	MOV  R26,R30
00009d 81e8      	LD   R30,Y
00009e 95e2      	SWAP R30
00009f 7fe0      	ANDI R30,0xF0
0000a0 2bea      	OR   R30,R26
0000a1 bbe2      	OUT  0x12,R30
                 ;	LCD_Port |= (1<<EN);
0000a2 9a91      	SBI  0x12,1
                 ;	delay_us(1);
                +
0000a3 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0000a4 958a     +DEC R24
0000a5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ;	LCD_Port &= ~ (1<<EN);
0000a6 9891      	CBI  0x12,1
                 ;	delay_ms(2);
0000a7 940e 0394 	CALL SUBOPT_0x1
                 ;}
0000a9 9621      	ADIW R28,1
0000aa 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_Init (void) {				/* LCD Initialize function */
                 _LCD_Init:
                 ; .FSTART _LCD_Init
                 ;	delay_ms(20);					/* LCD Power ON delay always >15ms */
0000ab e1a4      	LDI  R26,LOW(20)
0000ac e0b0      	LDI  R27,0
0000ad 940e 03ff 	CALL _delay_ms
                 ;
                 ;	LCD_Command(0x02);				/* send for 4 bit initialization of LCD  */
0000af e0a2      	LDI  R26,LOW(2)
0000b0 dfd9      	RCALL _LCD_Command
                 ;	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
0000b1 e2a8      	LDI  R26,LOW(40)
0000b2 dfd7      	RCALL _LCD_Command
                 ;	LCD_Command(0x0c);              /* Display on cursor off*/
0000b3 e0ac      	LDI  R26,LOW(12)
0000b4 dfd5      	RCALL _LCD_Command
                 ;	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
0000b5 e0a6      	LDI  R26,LOW(6)
0000b6 dfd3      	RCALL _LCD_Command
                 ;	LCD_Command(0x01);              /* Clear display screen*/
0000b7 e0a1      	LDI  R26,LOW(1)
0000b8 dfd1      	RCALL _LCD_Command
                 ;	delay_ms(2);
0000b9 940e 0394 	CALL SUBOPT_0x1
                 ;}
0000bb 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_String (char *str)	{		/* Send string to LCD function */
                 _LCD_String:
                 ; .FSTART _LCD_String
                 ;	int i;
                 ;	for(i=0;str[i]!=0;i++) {		/* Send each char of string till the NULL */
0000bc 93ba      	ST   -Y,R27
0000bd 93aa      	ST   -Y,R26
0000be 931a      	ST   -Y,R17
0000bf 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	i -> R16,R17
                +
0000c0 e000     +LDI R16 , LOW ( 0 )
0000c1 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
0000c2 01f8      	MOVW R30,R16
0000c3 81aa      	LDD  R26,Y+2
0000c4 81bb      	LDD  R27,Y+2+1
0000c5 0fae      	ADD  R26,R30
0000c6 1fbf      	ADC  R27,R31
0000c7 91ec      	LD   R30,X
0000c8 30e0      	CPI  R30,0
0000c9 f051      	BREQ _0x5
                 ;		LCD_Char (str[i]);
0000ca 01f8      	MOVW R30,R16
0000cb 81aa      	LDD  R26,Y+2
0000cc 81bb      	LDD  R27,Y+2+1
0000cd 0fae      	ADD  R26,R30
0000ce 1fbf      	ADC  R27,R31
0000cf 91ac      	LD   R26,X
0000d0 dfbd      	RCALL _LCD_Char
                 ;	}
                +
0000d1 5f0f     +SUBI R16 , LOW ( - 1 )
0000d2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000d3 cfee      	RJMP _0x4
                 _0x5:
                 ;}
0000d4 8119      	LDD  R17,Y+1
0000d5 8108      	LDD  R16,Y+0
0000d6 9624      	ADIW R28,4
0000d7 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_String_xy (char row, char pos, char *str) {	/* Send string to LCD with xy position */
                 ;	if (row == 0 && pos<16)
                 ;	row -> Y+3
                 ;	pos -> Y+2
                 ;	*str -> Y+0
                 ;	LCD_Command((pos & 0x0F)|0x80);						/* Command of first row and required position<16 */
                 ;	else if (row == 1 && pos<16)
                 ;	LCD_Command((pos & 0x0F)|0xC0);						/* Command of first row and required position<16 */
                 ;	LCD_String(str);									/* Call LCD string function */
                 ;}
                 ;
                 ;void LCD_Clear() {
                 _LCD_Clear:
                 ; .FSTART _LCD_Clear
                 ;	LCD_Command (0x01);		/* Clear display */
0000d8 e0a1      	LDI  R26,LOW(1)
0000d9 dfb0      	RCALL _LCD_Command
                 ;	delay_ms(2);
0000da 940e 0394 	CALL SUBOPT_0x1
                 ;	LCD_Command (0x80);		/* Cursor at home position */
0000dc e8a0      	LDI  R26,LOW(128)
0000dd dfac      	RCALL _LCD_Command
                 ;}
0000de 9508      	RET
                 ; .FEND
                 ;#include <keypad.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;
                 ;#define KEY_PORT    PORTC
                 ;#define KEY_DDR     DDRC
                 ;#define KEY_PIN     PINC
                 ;
                 ;#define C1  4
                 ;#define C2  5
                 ;#define C3  6
                 ;#define C4  7
                 ;
                 ;unsigned char table[16] = {
                 ;15, 0, 14, 13,
                 ;1,  2, 3,  12,
                 ;4,  5, 6,  11,
                 ;7,  8, 9,  10};
                 
                 	.DSEG
                 ;
                 ;// When you want to read a PIN right after writing to PORT you should wait
                 ;const unsigned char Delay = 5;
                 ;
                 ;void keypad_init(void){
                 ; 0000 0004 void keypad_init(void){
                 
                 	.CSEG
                 _keypad_init:
                 ; .FSTART _keypad_init
                 ;    KEY_DDR = 0x0f;
0000df e0ef      	LDI  R30,LOW(15)
0000e0 bbe4      	OUT  0x14,R30
                 ;    KEY_PORT = 0xf0;
0000e1 efe0      	LDI  R30,LOW(240)
0000e2 bbe5      	OUT  0x15,R30
                 ;}
0000e3 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char key_released(void) {
                 _key_released:
                 ; .FSTART _key_released
                 ;    KEY_PORT = 0xf0;
0000e4 940e 0398 	CALL SUBOPT_0x2
                 ;    delay_us(Delay);
                 ;    if((KEY_PIN & 0xf0) == 0xf0)
0000e6 f021      	BREQ _0x20A0004
                 ;        return 1;
                 ;    else
                 ;        return 0;
0000e7 c005      	RJMP _0x20A0003
                 ;}
                 ; .FEND
                 ;
                 ;unsigned char key_pressed(void) {
                 _key_pressed:
                 ; .FSTART _key_pressed
                 ;    KEY_PORT = 0xf0;
0000e8 940e 0398 	CALL SUBOPT_0x2
                 ;    delay_us(Delay);
                 ;    if( (KEY_PIN & 0xf0) != 0xf0 ) { // User presses some key
0000ea f011      	BREQ _0x10
                 ;        return 1;
                 _0x20A0004:
0000eb e0e1      	LDI  R30,LOW(1)
0000ec 9508      	RET
                 ;    }
                 ;    return 0;
                 _0x10:
                 _0x20A0003:
0000ed e0e0      	LDI  R30,LOW(0)
0000ee 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;unsigned char key_scan(void) {
                 _key_scan:
                 ; .FSTART _key_scan
                 ;
                 ;    unsigned char i, key;
                 ;    if(key_pressed()){
0000ef 931a      	ST   -Y,R17
0000f0 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	key -> R16
0000f1 dff6      	RCALL _key_pressed
0000f2 30e0      	CPI  R30,0
0000f3 f409      	BRNE PC+2
0000f4 c045      	RJMP _0x11
                 ;        for(i = 0; i < 4; i++){
0000f5 e010      	LDI  R17,LOW(0)
                 _0x13:
0000f6 3014      	CPI  R17,4
0000f7 f5e8      	BRSH _0x14
                 ;            KEY_PORT = ~(1 << i);
0000f8 2fe1      	MOV  R30,R17
0000f9 e0a1      	LDI  R26,LOW(1)
0000fa 940e 05bd 	CALL __LSLB12
0000fc 95e0      	COM  R30
0000fd bbe5      	OUT  0x15,R30
                 ;            delay_us(Delay);
                +
0000fe e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ff 958a     +DEC R24
000100 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;
                 ;            if(((KEY_PIN >> C1) & 1) == 0)     key = table[i*4];
000101 b3e3      	IN   R30,0x13
000102 e0f0      	LDI  R31,0
000103 940e 05c5 	CALL __ASRW4
000105 70e1      	ANDI R30,LOW(0x1)
000106 f431      	BRNE _0x15
000107 e0e4      	LDI  R30,LOW(4)
000108 9fe1      	MUL  R30,R17
000109 01f0      	MOVW R30,R0
00010a 58e1      	SUBI R30,LOW(-_table)
00010b 4ffd      	SBCI R31,HIGH(-_table)
00010c 8100      	LD   R16,Z
                 ;
                 ;            if(((KEY_PIN >> C2) & 1) == 0)     key = table[i*4+1];
                 _0x15:
00010d b3e3      	IN   R30,0x13
00010e e0f0      	LDI  R31,0
00010f 95f5      	ASR  R31
000110 95e7      	ROR  R30
000111 940e 05c5 	CALL __ASRW4
000113 70e1      	ANDI R30,LOW(0x1)
000114 f431      	BRNE _0x16
000115 e0e4      	LDI  R30,LOW(4)
000116 9fe1      	MUL  R30,R17
000117 01f0      	MOVW R30,R0
                +
000118 58e0     +SUBI R30 , LOW ( - _table - ( 1 ) )
000119 4ffd     +SBCI R31 , HIGH ( - _table - ( 1 ) )
                 	__ADDW1MN _table,1
00011a 8100      	LD   R16,Z
                 ;
                 ;            if(((KEY_PIN >> C3) & 1) == 0)     key = table[i*4+2];
                 _0x16:
00011b b3e3      	IN   R30,0x13
00011c e0f0      	LDI  R31,0
00011d 940e 05c9 	CALL __ASRW2
00011f 940e 05c5 	CALL __ASRW4
000121 70e1      	ANDI R30,LOW(0x1)
000122 f431      	BRNE _0x17
000123 e0e4      	LDI  R30,LOW(4)
000124 9fe1      	MUL  R30,R17
000125 01f0      	MOVW R30,R0
                +
000126 57ef     +SUBI R30 , LOW ( - _table - ( 2 ) )
000127 4ffd     +SBCI R31 , HIGH ( - _table - ( 2 ) )
                 	__ADDW1MN _table,2
000128 8100      	LD   R16,Z
                 ;
                 ;            if(((KEY_PIN >> C4) & 1) == 0)     key = table[i*4+3];
                 _0x17:
000129 b3e3      	IN   R30,0x13
00012a 940e 03a1 	CALL SUBOPT_0x3
00012c f431      	BRNE _0x18
00012d e0e4      	LDI  R30,LOW(4)
00012e 9fe1      	MUL  R30,R17
00012f 01f0      	MOVW R30,R0
                +
000130 57ee     +SUBI R30 , LOW ( - _table - ( 3 ) )
000131 4ffd     +SBCI R31 , HIGH ( - _table - ( 3 ) )
                 	__ADDW1MN _table,3
000132 8100      	LD   R16,Z
                 ;        }
                 _0x18:
000133 5f1f      	SUBI R17,-1
000134 cfc1      	RJMP _0x13
                 _0x14:
                 ;        while(!key_released());
                 _0x19:
000135 dfae      	RCALL _key_released
000136 30e0      	CPI  R30,0
000137 f3e9      	BREQ _0x19
                 ;        return key;
000138 2fe0      	MOV  R30,R16
000139 c001      	RJMP _0x20A0002
                 ;    }
                 ;
                 ;    else
                 _0x11:
                 ;        return 255;
00013a efef      	LDI  R30,LOW(255)
                 ;
                 ;}
                 _0x20A0002:
00013b 9109      	LD   R16,Y+
00013c 9119      	LD   R17,Y+
00013d 9508      	RET
                 ; .FEND
                 ;#include <shtxx.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;
                 ;#define SHT_DDR DDRA
                 ;#define SHT_PIN PINA
                 ;#define SHT_PORT PORTA
                 ;#define SHT_SCK_PIN_NO 0
                 ;#define SHT_DATA_PIN_NO 1
                 ;#define MEASURE_TEMP 0x03
                 ;#define MEASURE_HUMI 0x05
                 ;#define RESET        0x1e
                 ;
                 ;void sht_start(void) {
                 ; 0000 0005 void sht_start(void) {
                 _sht_start:
                 ; .FSTART _sht_start
                 ;    SHT_DDR |= (1<<SHT_DATA_PIN_NO); // DATA is output
00013e 9ad1      	SBI  0x1A,1
                 ;
                 ;    SHT_PORT |= (1<<SHT_DATA_PIN_NO);
00013f 9ad9      	SBI  0x1B,1
                 ;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
000140 98d8      	CBI  0x1B,0
                 ;    SHT_PORT |= (1<<SHT_SCK_PIN_NO);
000141 9ad8      	SBI  0x1B,0
                 ;    SHT_PORT &= ~(1<<SHT_DATA_PIN_NO);
000142 98d9      	CBI  0x1B,1
                 ;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
000143 98d8      	CBI  0x1B,0
                 ;    SHT_PORT |= (1<<SHT_SCK_PIN_NO);
000144 9ad8      	SBI  0x1B,0
                 ;    SHT_PORT |= (1<<SHT_DATA_PIN_NO);
000145 9ad9      	SBI  0x1B,1
                 ;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
000146 98d8      	CBI  0x1B,0
                 ;}
000147 9508      	RET
                 ; .FEND
                 ;//##########################################################################
                 ;
                 ;char sht_write(unsigned char Byte) {
                 _sht_write:
                 ; .FSTART _sht_write
                 ;    unsigned char i, error = 0;
                 ;
                 ;    SHT_DDR |= (1<<SHT_DATA_PIN_NO); // Data is an output
000148 93aa      	ST   -Y,R26
000149 931a      	ST   -Y,R17
00014a 930a      	ST   -Y,R16
                 ;	Byte -> Y+2
                 ;	i -> R17
                 ;	error -> R16
00014b e000      	LDI  R16,0
00014c 9ad1      	SBI  0x1A,1
                 ;    delay_us(5);
                +
00014d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00014e 958a     +DEC R24
00014f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;    for(i = 0x80; i > 0; i /= 2) {
000150 e810      	LDI  R17,LOW(128)
                 _0x1E:
000151 3011      	CPI  R17,1
000152 f060      	BRLO _0x1F
                 ;        SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
000153 98d8      	CBI  0x1B,0
                 ;        if(i & Byte) {
000154 81ea      	LDD  R30,Y+2
000155 23e1      	AND  R30,R17
000156 f019      	BREQ _0x20
                 ;            PORTA |= (1<<1);
000157 9ad9      	SBI  0x1B,1
                 ;            SHT_PORT |= (1<<SHT_DATA_PIN_NO);
000158 9ad9      	SBI  0x1B,1
                 ;        }
                 ;        else {
000159 c001      	RJMP _0x21
                 _0x20:
                 ;            SHT_PORT &= ~(1<<SHT_DATA_PIN_NO);
00015a 98d9      	CBI  0x1B,1
                 ;        }
                 _0x21:
                 ;        SHT_PORT |= (1<<SHT_SCK_PIN_NO);
00015b 9ad8      	SBI  0x1B,0
                 ;    }
00015c 940e 03a8 	CALL SUBOPT_0x4
00015e cff2      	RJMP _0x1E
                 _0x1F:
                 ;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
00015f 98d8      	CBI  0x1B,0
                 ;    SHT_DDR &= ~(1<<SHT_DATA_PIN_NO); // DATA is input
000160 98d1      	CBI  0x1A,1
                 ;    SHT_PORT |= (1<<SHT_SCK_PIN_NO);
000161 940e 03b0 	CALL SUBOPT_0x5
                 ;    error = (SHT_PIN >> SHT_DATA_PIN_NO) & 1;
000163 2f0e      	MOV  R16,R30
                 ;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
000164 c019      	RJMP _0x20A0001
                 ;
                 ;    return(error);
                 ;}
                 ; .FEND
                 ;//###################################################
                 ;unsigned char sht_read(unsigned char ack) {
                 _sht_read:
                 ; .FSTART _sht_read
                 ;    unsigned char i, val = 0;
                 ;
                 ;    SHT_DDR &= ~(1<<SHT_DATA_PIN_NO); // DATA is INPUT
000165 93aa      	ST   -Y,R26
000166 931a      	ST   -Y,R17
000167 930a      	ST   -Y,R16
                 ;	ack -> Y+2
                 ;	i -> R17
                 ;	val -> R16
000168 e000      	LDI  R16,0
000169 98d1      	CBI  0x1A,1
                 ;
                 ;    for(i = 0x80; i > 0; i /= 2) {
00016a e810      	LDI  R17,LOW(128)
                 _0x23:
00016b 3011      	CPI  R17,1
00016c f048      	BRLO _0x24
                 ;        SHT_PORT |= (1<<SHT_SCK_PIN_NO);
00016d 940e 03b0 	CALL SUBOPT_0x5
                 ;        if(((SHT_PIN >> SHT_DATA_PIN_NO) & 1) == 1) {
00016f 30e1      	CPI  R30,LOW(0x1)
000170 f409      	BRNE _0x25
                 ;            val = val | i;
000171 2b01      	OR   R16,R17
                 ;        }
                 ;        SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
                 _0x25:
000172 98d8      	CBI  0x1B,0
                 ;    }
000173 940e 03a8 	CALL SUBOPT_0x4
000175 cff5      	RJMP _0x23
                 _0x24:
                 ;    SHT_DDR |= (1<<SHT_DATA_PIN_NO); // DATA is output
000176 9ad1      	SBI  0x1A,1
                 ;    if(ack == 0) {
000177 81ea      	LDD  R30,Y+2
000178 30e0      	CPI  R30,0
000179 f411      	BRNE _0x26
                 ;        SHT_PORT |= (1<<SHT_DATA_PIN_NO);
00017a 9ad9      	SBI  0x1B,1
                 ;    }
                 ;    else {
00017b c001      	RJMP _0x27
                 _0x26:
                 ;        SHT_PORT &= ~(1<<SHT_DATA_PIN_NO);
00017c 98d9      	CBI  0x1B,1
                 ;    }
                 _0x27:
                 ;    SHT_PORT |= (1<<SHT_SCK_PIN_NO);
00017d 9ad8      	SBI  0x1B,0
                 ;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
                 _0x20A0001:
00017e 98d8      	CBI  0x1B,0
                 ;
                 ;    return(val);
00017f 2fe0      	MOV  R30,R16
000180 8119      	LDD  R17,Y+1
000181 8108      	LDD  R16,Y+0
000182 9623      	ADIW R28,3
000183 9508      	RET
                 ;}
                 ; .FEND
                 ;//########################################################
                 ;void connection_reset(void) {
                 ;    unsigned char i;
                 ;    SHT_DDR |= (1<<SHT_DATA_PIN_NO);
                 ;	i -> R17
                 ;    SHT_PORT |= (1<<SHT_DATA_PIN_NO);
                 ;    for (i=0;i<9;i++) {
                 ;        SHT_PORT |= (1<<SHT_SCK_PIN_NO);
                 ;        delay_us(2);
                 ;        SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
                 ;        delay_us(2);
                 ;    }
                 ;    SHT_PORT |= (1<<SHT_DATA_PIN_NO);
                 ;    sht_start();
                 ;    delay_ms(100);
                 ;}
                 ;//####################################################
                 ;void sht_reset() {
                 ;    sht_start();
                 ;    sht_write(RESET);
                 ;
                 ;    delay_ms(100);
                 ;}
                 ;//#####################################################
                 ;// Read the sensor value. Reg is register to read from
                 ;unsigned int ReadSensor(int Reg) {
                 _ReadSensor:
                 ; .FSTART _ReadSensor
                 ;    unsigned char msb, lsb, crc;
                 ;
                 ;    sht_start();
000184 93ba      	ST   -Y,R27
000185 93aa      	ST   -Y,R26
000186 940e 0636 	CALL __SAVELOCR4
                 ;	Reg -> Y+4
                 ;	msb -> R17
                 ;	lsb -> R16
                 ;	crc -> R19
000188 dfb5      	RCALL _sht_start
                 ;    sht_write(Reg);
000189 81ac      	LDD  R26,Y+4
00018a dfbd      	RCALL _sht_write
                 ;
                 ;    while(((SHT_PIN >> SHT_DATA_PIN_NO) & 1) == 1);
                 _0x2B:
00018b b3e9      	IN   R30,0x19
00018c e0f0      	LDI  R31,0
00018d 95f5      	ASR  R31
00018e 95e7      	ROR  R30
00018f 70e1      	ANDI R30,LOW(0x1)
000190 30e1      	CPI  R30,LOW(0x1)
000191 f3c9      	BREQ _0x2B
                 ;
                 ;    msb = sht_read(1);
000192 e0a1      	LDI  R26,LOW(1)
000193 dfd1      	RCALL _sht_read
000194 2f1e      	MOV  R17,R30
                 ;    lsb = sht_read(1);
000195 e0a1      	LDI  R26,LOW(1)
000196 dfce      	RCALL _sht_read
000197 2f0e      	MOV  R16,R30
                 ;    crc = sht_read(0);
000198 e0a0      	LDI  R26,LOW(0)
000199 dfcb      	RCALL _sht_read
00019a 2f3e      	MOV  R19,R30
                 ;
                 ;    return(((unsigned short) msb << 8) | (unsigned short) lsb);
00019b 2ff1      	MOV  R31,R17
00019c e0e0      	LDI  R30,LOW(0)
00019d 01df      	MOVW R26,R30
00019e 2fe0      	MOV  R30,R16
00019f e0f0      	LDI  R31,0
0001a0 2bea      	OR   R30,R26
0001a1 2bfb      	OR   R31,R27
0001a2 940e 063b 	CALL __LOADLOCR4
0001a4 9626      	ADIW R28,6
0001a5 9508      	RET
                 ;}
                 ; .FEND
                 ;//######################################################
                 ;float read_sensor(char humidity0temperture1) {
                 _read_sensor:
                 ; .FSTART _read_sensor
                 ;    long int income,temp;
                 ;    float out,out0,t;
                 ;    switch(humidity0temperture1) {
0001a6 93aa      	ST   -Y,R26
0001a7 9764      	SBIW R28,20
                 ;	humidity0temperture1 -> Y+20
                 ;	income -> Y+16
                 ;	temp -> Y+12
                 ;	out -> Y+8
                 ;	out0 -> Y+4
                 ;	t -> Y+0
0001a8 89ec      	LDD  R30,Y+20
0001a9 e0f0      	LDI  R31,0
                 ;        case 0:
0001aa 9730      	SBIW R30,0
0001ab f009      	BREQ PC+2
0001ac c06b      	RJMP _0x31
                 ;            income = ReadSensor(MEASURE_HUMI);
0001ad e0a5      	LDI  R26,LOW(5)
0001ae 940e 03b7 	CALL SUBOPT_0x6
                 ;            out0=(-2.0468+(0.0367*income)+(-1.5955E-6*(income*income)));
                +
0001b0 ebad     +LDI R26 , LOW ( 0x3D1652BD )
0001b1 e5b2     +LDI R27 , HIGH ( 0x3D1652BD )
0001b2 e186     +LDI R24 , BYTE3 ( 0x3D1652BD )
0001b3 e39d     +LDI R25 , BYTE4 ( 0x3D1652BD )
                 	__GETD2N 0x3D1652BD
0001b4 940e 04f9 	CALL __MULF12
                +
0001b6 eca5     +LDI R26 , LOW ( 0xC002FEC5 )
0001b7 efbe     +LDI R27 , HIGH ( 0xC002FEC5 )
0001b8 e082     +LDI R24 , BYTE3 ( 0xC002FEC5 )
0001b9 ec90     +LDI R25 , BYTE4 ( 0xC002FEC5 )
                 	__GETD2N 0xC002FEC5
0001ba 940e 04a9 	CALL __ADDF12
0001bc 937f      	PUSH R23
0001bd 936f      	PUSH R22
0001be 93ff      	PUSH R31
0001bf 93ef      	PUSH R30
0001c0 940e 03c3 	CALL SUBOPT_0x7
                +
0001c2 89a8     +LDD R26 , Y + 16
0001c3 89b9     +LDD R27 , Y + 16 + 1
0001c4 898a     +LDD R24 , Y + 16 + 2
0001c5 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0001c6 940e 05f3 	CALL __MULD12
0001c8 940e 046f 	CALL __CDF1
                +
0001ca efa6     +LDI R26 , LOW ( 0xB5D624F6 )
0001cb e2b4     +LDI R27 , HIGH ( 0xB5D624F6 )
0001cc ed86     +LDI R24 , BYTE3 ( 0xB5D624F6 )
0001cd eb95     +LDI R25 , BYTE4 ( 0xB5D624F6 )
                 	__GETD2N 0xB5D624F6
0001ce 940e 04f9 	CALL __MULF12
0001d0 91af      	POP  R26
0001d1 91bf      	POP  R27
0001d2 918f      	POP  R24
0001d3 919f      	POP  R25
0001d4 940e 04a9 	CALL __ADDF12
                +
0001d6 83ec     +STD Y + 4 , R30
0001d7 83fd     +STD Y + 4 + 1 , R31
0001d8 836e     +STD Y + 4 + 2 , R22
0001d9 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ;            temp=income;
0001da 940e 03c3 	CALL SUBOPT_0x7
                +
0001dc 87ec     +STD Y + 12 , R30
0001dd 87fd     +STD Y + 12 + 1 , R31
0001de 876e     +STD Y + 12 + 2 , R22
0001df 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ;            delay_ms(500);
0001e0 efa4      	LDI  R26,LOW(500)
0001e1 e0b1      	LDI  R27,HIGH(500)
0001e2 940e 03ff 	CALL _delay_ms
                 ;            ReadSensor(MEASURE_TEMP);
0001e4 e0a3      	LDI  R26,LOW(3)
0001e5 e0b0      	LDI  R27,0
0001e6 df9d      	RCALL _ReadSensor
                 ;            t = -40.1 + 0.01*income;
0001e7 940e 03c3 	CALL SUBOPT_0x7
0001e9 940e 046f 	CALL __CDF1
0001eb 940e 03c8 	CALL SUBOPT_0x8
0001ed 940e 03cd 	CALL SUBOPT_0x9
0001ef 940e 04a9 	CALL __ADDF12
0001f1 940e 0631 	CALL __PUTD1S0
                 ;            out=(t-25)*(0.01+0.00008*temp)+out0;
                +
0001f3 e0a0     +LDI R26 , LOW ( 0x41C80000 )
0001f4 e0b0     +LDI R27 , HIGH ( 0x41C80000 )
0001f5 ec88     +LDI R24 , BYTE3 ( 0x41C80000 )
0001f6 e491     +LDI R25 , BYTE4 ( 0x41C80000 )
                 	__GETD2N 0x41C80000
0001f7 940e 04a2 	CALL __SUBF12
0001f9 937f      	PUSH R23
0001fa 936f      	PUSH R22
0001fb 93ff      	PUSH R31
0001fc 93ef      	PUSH R30
                +
0001fd 85ec     +LDD R30 , Y + 12
0001fe 85fd     +LDD R31 , Y + 12 + 1
0001ff 856e     +LDD R22 , Y + 12 + 2
000200 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000201 940e 046f 	CALL __CDF1
                +
000203 eaac     +LDI R26 , LOW ( 0x38A7C5AC )
000204 ecb5     +LDI R27 , HIGH ( 0x38A7C5AC )
000205 ea87     +LDI R24 , BYTE3 ( 0x38A7C5AC )
000206 e398     +LDI R25 , BYTE4 ( 0x38A7C5AC )
                 	__GETD2N 0x38A7C5AC
000207 940e 04f9 	CALL __MULF12
000209 940e 03c8 	CALL SUBOPT_0x8
00020b 940e 04a9 	CALL __ADDF12
00020d 91af      	POP  R26
00020e 91bf      	POP  R27
00020f 918f      	POP  R24
000210 919f      	POP  R25
000211 940e 04f9 	CALL __MULF12
                +
000213 81ac     +LDD R26 , Y + 4
000214 81bd     +LDD R27 , Y + 4 + 1
000215 818e     +LDD R24 , Y + 4 + 2
000216 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000217 c00b      	RJMP _0x5D
                 ;            break;
                 ;        case 1:
                 _0x31:
000218 30e1      	CPI  R30,LOW(0x1)
000219 e0a0      	LDI  R26,HIGH(0x1)
00021a 07fa      	CPC  R31,R26
00021b f469      	BRNE _0x30
                 ;            income = ReadSensor(MEASURE_TEMP);
00021c e0a3      	LDI  R26,LOW(3)
00021d 940e 03b7 	CALL SUBOPT_0x6
                 ;            out = -40.1 + 0.01*income;
00021f 940e 03c8 	CALL SUBOPT_0x8
000221 940e 03cd 	CALL SUBOPT_0x9
                 _0x5D:
000223 940e 04a9 	CALL __ADDF12
                +
000225 87e8     +STD Y + 8 , R30
000226 87f9     +STD Y + 8 + 1 , R31
000227 876a     +STD Y + 8 + 2 , R22
000228 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ;            break;
                 ;    }
                 _0x30:
                 ;        return(out);
                +
000229 85e8     +LDD R30 , Y + 8
00022a 85f9     +LDD R31 , Y + 8 + 1
00022b 856a     +LDD R22 , Y + 8 + 2
00022c 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00022d 9665      	ADIW R28,21
00022e 9508      	RET
                 ;}
                 ; .FEND
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;
                 ;int i,j;
                 ;
                 ;// Variables for password part
                 ;#define PASSWORD_LENGTH 4
                 ;char password[PASSWORD_LENGTH + 1];
                 ;char user_password[PASSWORD_LENGTH + 1];
                 ;
                 ;unsigned char pressed_key_integer;
                 ;char pressed_key_ascii[8];
                 ;
                 ;eeprom char pas[3] = {1,2,3};
                 ;
                 ;// VAriable for T/C
                 ;long int overflow_count = 0;
                 ;
                 ;// VAriable for SPI
                 ;char ignore;
                 ;
                 ;// Variables for ADC
                 ;float temperature;
                 ;float humidity;
                 ;float ldrValue;
                 ;
                 ;float read_adc();
                 ;
                 ;void main(void){
                 ; 0000 0023 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 0024     // LCD initialization
                 ; 0000 0025     DDRD = 0xFF;
00022f efef      	LDI  R30,LOW(255)
000230 bbe1      	OUT  0x11,R30
                 ; 0000 0026     LCD_Init();
000231 de79      	RCALL _LCD_Init
                 ; 0000 0027 
                 ; 0000 0028     // Keypad initialization
                 ; 0000 0029     keypad_init();
000232 deac      	RCALL _keypad_init
                 ; 0000 002A 
                 ; 0000 002B 
                 ; 0000 002C 
                 ; 0000 002D     while (1) {
                 _0x33:
                 ; 0000 002E         LCD_Clear();
000233 dea4      	RCALL _LCD_Clear
                 ; 0000 002F         LCD_String("Enter Password:");
                +
000234 e6a0     +LDI R26 , LOW ( _0x36 + ( 0 ) )
000235 e0b2     +LDI R27 , HIGH ( _0x36 + ( 0 ) )
                 	__POINTW2MN _0x36,0
000236 de85      	RCALL _LCD_String
                 ; 0000 0030         LCD_Command(0xC0); // Go to 2nd line
000237 eca0      	LDI  R26,LOW(192)
000238 de51      	RCALL _LCD_Command
                 ; 0000 0031         for(i = 0; i < PASSWORD_LENGTH; i++) {
000239 2444      	CLR  R4
00023a 2455      	CLR  R5
                 _0x38:
00023b e0e4      	LDI  R30,LOW(4)
00023c e0f0      	LDI  R31,HIGH(4)
00023d 164e      	CP   R4,R30
00023e 065f      	CPC  R5,R31
00023f f4c4      	BRGE _0x39
                 ; 0000 0032             do {
                 _0x3B:
                 ; 0000 0033                 pressed_key_integer = key_scan();
000240 deae      	RCALL _key_scan
000241 2e9e      	MOV  R9,R30
                 ; 0000 0034             } while (pressed_key_integer == 255);
000242 efef      	LDI  R30,LOW(255)
000243 15e9      	CP   R30,R9
000244 f3d9      	BREQ _0x3B
                 ; 0000 0035             // sprintf(pressed_key_ascii, "%d", pressed_key_integer);
                 ; 0000 0036             itoa(pressed_key_integer, pressed_key_ascii);
000245 2de9      	MOV  R30,R9
000246 e0f0      	LDI  R31,0
000247 93fa      	ST   -Y,R31
000248 93ea      	ST   -Y,R30
000249 e9a4      	LDI  R26,LOW(_pressed_key_ascii)
00024a e0b2      	LDI  R27,HIGH(_pressed_key_ascii)
00024b 940e 035d 	CALL _itoa
                 ; 0000 0037             LCD_String(pressed_key_ascii);
00024d e9a4      	LDI  R26,LOW(_pressed_key_ascii)
00024e e0b2      	LDI  R27,HIGH(_pressed_key_ascii)
00024f de6c      	RCALL _LCD_String
                 ; 0000 0038             user_password[i] = pressed_key_integer;
000250 01f2      	MOVW R30,R4
000251 57e1      	SUBI R30,LOW(-_user_password)
000252 4ffd      	SBCI R31,HIGH(-_user_password)
000253 8290      	ST   Z,R9
                 ; 0000 0039         }
000254 01f2      	MOVW R30,R4
000255 9631      	ADIW R30,1
000256 012f      	MOVW R4,R30
000257 cfe3      	RJMP _0x38
                 _0x39:
                 ; 0000 003A         LCD_Clear();
000258 de7f      	RCALL _LCD_Clear
                 ; 0000 003B 
                 ; 0000 003C 
                 ; 0000 003D 
                 ; 0000 003E 
                 ; 0000 003F         if(user_password[0] == 1) {
000259 91a0 028f 	LDS  R26,_user_password
00025b 30a1      	CPI  R26,LOW(0x1)
00025c f489      	BRNE _0x3D
                 ; 0000 0040         if(user_password[1] == 2){
                +
00025d 91a0 0290+LDS R26 , _user_password + ( 1 )
                 	__GETB2MN _user_password,1
00025f 30a2      	CPI  R26,LOW(0x2)
000260 f469      	BRNE _0x3E
                 ; 0000 0041         if(user_password[2] == 3){
                +
000261 91a0 0291+LDS R26 , _user_password + ( 2 )
                 	__GETB2MN _user_password,2
000263 30a3      	CPI  R26,LOW(0x3)
000264 f449      	BRNE _0x3F
                 ; 0000 0042             LCD_String("System Started");
                +
000265 e7a0     +LDI R26 , LOW ( _0x36 + ( 16 ) )
000266 e0b2     +LDI R27 , HIGH ( _0x36 + ( 16 ) )
                 	__POINTW2MN _0x36,16
000267 de54      	RCALL _LCD_String
                 ; 0000 0043             delay_ms(300);
000268 e2ac      	LDI  R26,LOW(300)
000269 e0b1      	LDI  R27,HIGH(300)
00026a 940e 03ff 	CALL _delay_ms
                 ; 0000 0044             LCD_Clear();
00026c de6b      	RCALL _LCD_Clear
                 ; 0000 0045             break;
00026d c001      	RJMP _0x35
                 ; 0000 0046         }
                 ; 0000 0047         }
                 _0x3F:
                 ; 0000 0048 
                 ; 0000 0049         }
                 _0x3E:
                 ; 0000 004A         else {}
                 _0x3D:
                 ; 0000 004B     }
00026e cfc4      	RJMP _0x33
                 _0x35:
                 ; 0000 004C 
                 ; 0000 004D     // LDR initialization
                 ; 0000 004E     ADMUX  |= (1 << REFS0); // ADC Voltage Reference: AVCC, cap. on AREF
00026f 9a3e      	SBI  0x7,6
                 ; 0000 004F     ADMUX  |= (0 << MUX4) | (0 << MUX3) | (0 << MUX2) | (1 << MUX1) | (0 << MUX0); // Select ADC2 Single ended as analog ...
000270 9a39      	SBI  0x7,1
                 ; 0000 0050     ADCSRA |= (1 << ADEN); // ADC Enable
000271 9a37      	SBI  0x6,7
                 ; 0000 0051     ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0); // ADC Prescalar: 64
000272 b1e6      	IN   R30,0x6
000273 60e6      	ORI  R30,LOW(0x6)
000274 b9e6      	OUT  0x6,R30
                 ; 0000 0052 
                 ; 0000 0053     // SHT initialization
                 ; 0000 0054     DDRA = (0<<DDA1) | (1<<DDA0); // Data is input and Clk is output
000275 e0e1      	LDI  R30,LOW(1)
000276 bbea      	OUT  0x1A,R30
                 ; 0000 0055     PORTA = (1<<PORTA1) | (0<<PORTA0); // Pull up Data
000277 e0e2      	LDI  R30,LOW(2)
000278 bbeb      	OUT  0x1B,R30
                 ; 0000 0056 
                 ; 0000 0057     // SPI initialization
                 ; 0000 0058     DDRB = (1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB2)| (1<<DDB1);
000279 ebe6      	LDI  R30,LOW(182)
00027a bbe7      	OUT  0x17,R30
                 ; 0000 0059     PORTB = (1<<PORTB4) | (1<<PORTB2)| (1<<DDB1);
00027b e1e6      	LDI  R30,LOW(22)
00027c bbe8      	OUT  0x18,R30
                 ; 0000 005A     SPCR |= (1<<SPE); // SPI Enable
00027d 9a6e      	SBI  0xD,6
                 ; 0000 005B     SPCR |= (0<<CPOL); // SPI Clock Polarity: Low
00027e b1ed      	IN   R30,0xD
00027f b9ed      	OUT  0xD,R30
                 ; 0000 005C     SPCR |= (0<<CPHA); // SPI Clock Phase: Leading edge sample / Trailing Edge setup
000280 b1ed      	IN   R30,0xD
000281 b9ed      	OUT  0xD,R30
                 ; 0000 005D     SPCR |= (1<<SPR1) | (1<<SPR0); // SPI Clock Rate: f/128 = 62.5 KHz
000282 b1ed      	IN   R30,0xD
000283 60e3      	ORI  R30,LOW(0x3)
000284 b9ed      	OUT  0xD,R30
                 ; 0000 005E     SPSR |= (0<<SPI2X);
000285 b1ee      	IN   R30,0xE
000286 b9ee      	OUT  0xE,R30
                 ; 0000 005F     SPCR |= (0<<DORD); // SPI Data Order: MSB First
000287 b1ed      	IN   R30,0xD
000288 b9ed      	OUT  0xD,R30
                 ; 0000 0060     SPCR |= (1<<MSTR); // SPI Type: Master
000289 9a6c      	SBI  0xD,4
                 ; 0000 0061 
                 ; 0000 0062     // T/C initialization
                 ; 0000 0063     TCCR0 = (0<<CS02) | (1<<CS01) | (0<<CS00); // Prescaler = 8 for t/c 0
00028a e0e2      	LDI  R30,LOW(2)
00028b bfe3      	OUT  0x33,R30
                 ; 0000 0064     TCNT0 = 0; // Count from 0 in t/c 0
00028c e0e0      	LDI  R30,LOW(0)
00028d bfe2      	OUT  0x32,R30
                 ; 0000 0065     TIMSK |= (1 << TOIE0); // Enable timer over flow interrupt for t/c 0
00028e b7e9      	IN   R30,0x39
00028f 60e1      	ORI  R30,1
000290 bfe9      	OUT  0x39,R30
                 ; 0000 0066 
                 ; 0000 0067     #asm("sei"); // Set global interrupt flag
000291 9478      	sei
                 ; 0000 0068     while(1) {
                 _0x41:
                 ; 0000 0069 
                 ; 0000 006A         // Read necessary data
                 ; 0000 006B         temperature = read_sensor(1); // Read temperature
000292 e0a1      	LDI  R26,LOW(1)
000293 df12      	RCALL _read_sensor
000294 93e0 02a0 	STS  _temperature,R30
000296 93f0 02a1 	STS  _temperature+1,R31
000298 9360 02a2 	STS  _temperature+2,R22
00029a 9370 02a3 	STS  _temperature+3,R23
                 ; 0000 006C         humidity = read_sensor(0); // Read humidity
00029c e0a0      	LDI  R26,LOW(0)
00029d df08      	RCALL _read_sensor
00029e 93e0 02a4 	STS  _humidity,R30
0002a0 93f0 02a5 	STS  _humidity+1,R31
0002a2 9360 02a6 	STS  _humidity+2,R22
0002a4 9370 02a7 	STS  _humidity+3,R23
                 ; 0000 006D         ldrValue = read_adc(); // Read light intensity
0002a6 d08d      	RCALL _read_adc
0002a7 940e 03d4 	CALL SUBOPT_0xA
                 ; 0000 006E         ldrValue = (ldrValue*5)/1023; // Real voltage value
0002a9 940e 03dd 	CALL SUBOPT_0xB
                +
0002ab e0e0     +LDI R30 , LOW ( 0x40A00000 )
0002ac e0f0     +LDI R31 , HIGH ( 0x40A00000 )
0002ad ea60     +LDI R22 , BYTE3 ( 0x40A00000 )
0002ae e470     +LDI R23 , BYTE4 ( 0x40A00000 )
                 	__GETD1N 0x40A00000
0002af 940e 04f9 	CALL __MULF12
0002b1 01df      	MOVW R26,R30
0002b2 01cb      	MOVW R24,R22
                +
0002b3 e0e0     +LDI R30 , LOW ( 0x447FC000 )
0002b4 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
0002b5 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
0002b6 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
0002b7 940e 0547 	CALL __DIVF21
0002b9 940e 03d4 	CALL SUBOPT_0xA
                 ; 0000 006F         // ldrValue = (500*(5-ldrValue))/ldrValue; // Voltage to resistance
                 ; 0000 0070 
                 ; 0000 0071         // (T(t/c) = prescalar / f(micro) = 8 / 8MHz = 1microSecond)
                 ; 0000 0072         // t/c 0 overflow happens each 2^8 * 1microSecond = 256 microSecond
                 ; 0000 0073         // after 2 seconds t/c overflows 2 second / 256 microsecond = 7812.5 times (overflow_count = 7812)
                 ; 0000 0074         // overflow_count * 256 + TCNT0 = 7812 * 256 + TCNT0 = 2000000 So TCNT0 = 128 = .5 * 256
                 ; 0000 0075         // so when overflow_count = 7812 & TCNT0 = 128 the condition of if will be satisfied
                 ; 0000 0076         if(overflow_count * 256 + TCNT0 >= 1999999) { // 2,000,000 microSecond = 2 second
0002bb 940e 03e6 	CALL SUBOPT_0xC
                +
0002bd e0a0     +LDI R26 , LOW ( 0x100 )
0002be e0b1     +LDI R27 , HIGH ( 0x100 )
0002bf e080     +LDI R24 , BYTE3 ( 0x100 )
0002c0 e090     +LDI R25 , BYTE4 ( 0x100 )
                 	__GETD2N 0x100
0002c1 940e 05f3 	CALL __MULD12
0002c3 01df      	MOVW R26,R30
0002c4 01cb      	MOVW R24,R22
0002c5 b7e2      	IN   R30,0x32
0002c6 e0f0      	LDI  R31,0
0002c7 940e 05ce 	CALL __CWD1
0002c9 940e 05ac 	CALL __ADDD21
                +
0002cb 37af     +CPI R26 , LOW ( 0x1E847F )
0002cc e8e4     +LDI R30 , HIGH ( 0x1E847F )
0002cd 07be     +CPC R27 , R30
0002ce e1ee     +LDI R30 , BYTE3 ( 0x1E847F )
0002cf 078e     +CPC R24 , R30
0002d0 e0e0     +LDI R30 , BYTE4 ( 0x1E847F )
0002d1 079e     +CPC R25 , R30
                 	__CPD2N 0x1E847F
0002d2 f40c      	BRGE PC+2
0002d3 c05e      	RJMP _0x44
                 ; 0000 0077             overflow_count = 0;
0002d4 e0e0      	LDI  R30,LOW(0)
0002d5 93e0 029c 	STS  _overflow_count,R30
0002d7 93e0 029d 	STS  _overflow_count+1,R30
0002d9 93e0 029e 	STS  _overflow_count+2,R30
0002db 93e0 029f 	STS  _overflow_count+3,R30
                 ; 0000 0078             TCNT0 = 0;
0002dd bfe2      	OUT  0x32,R30
                 ; 0000 0079 
                 ; 0000 007A             // Send temperature for slave 3
                 ; 0000 007B             PORTB &= ~(1<<PORTB1); // Select Slave #3
0002de 98c1      	CBI  0x18,1
                 ; 0000 007C             SPDR = humidity;
0002df 91e0 02a4 	LDS  R30,_humidity
0002e1 91f0 02a5 	LDS  R31,_humidity+1
0002e3 9160 02a6 	LDS  R22,_humidity+2
0002e5 9170 02a7 	LDS  R23,_humidity+3
0002e7 940e 0436 	CALL __CFD1U
0002e9 b9ef      	OUT  0xF,R30
                 ; 0000 007D             while(((SPSR >> SPIF) & 1) == 0);
                 _0x45:
0002ea b1ee      	IN   R30,0xE
0002eb 940e 03a1 	CALL SUBOPT_0x3
0002ed f3e1      	BREQ _0x45
                 ; 0000 007E             ignore = SPDR;
0002ee b08f      	IN   R8,15
                 ; 0000 007F             PORTB |= (1<<PORTB1); // Deselect Slave #3
0002ef 9ac1      	SBI  0x18,1
                 ; 0000 0080 
                 ; 0000 0081 
                 ; 0000 0082 
                 ; 0000 0083 
                 ; 0000 0084             // Send temperature for slave 1
                 ; 0000 0085             PORTB &= ~(1<<PORTB2); // Select Slave #1
0002f0 98c2      	CBI  0x18,2
                 ; 0000 0086             SPDR = temperature;
0002f1 91e0 02a0 	LDS  R30,_temperature
0002f3 91f0 02a1 	LDS  R31,_temperature+1
0002f5 9160 02a2 	LDS  R22,_temperature+2
0002f7 9170 02a3 	LDS  R23,_temperature+3
0002f9 940e 0436 	CALL __CFD1U
0002fb b9ef      	OUT  0xF,R30
                 ; 0000 0087             while(((SPSR >> SPIF) & 1) == 0);
                 _0x48:
0002fc b1ee      	IN   R30,0xE
0002fd 940e 03a1 	CALL SUBOPT_0x3
0002ff f3e1      	BREQ _0x48
                 ; 0000 0088             ignore = SPDR;
000300 b08f      	IN   R8,15
                 ; 0000 0089             PORTB |= (1<<PORTB2); // Deselect Slave #1
000301 9ac2      	SBI  0x18,2
                 ; 0000 008A 
                 ; 0000 008B             // Send ldrValue for slave 2
                 ; 0000 008C             PORTB &= ~(1<<PORTB4); // Select Slave #2
000302 98c4      	CBI  0x18,4
                 ; 0000 008D             if(ldrValue < 0.01) {
000303 940e 03ef 	CALL SUBOPT_0xD
000305 f410      	BRSH _0x4B
                 ; 0000 008E                 SPDR = 0;
000306 e0e0      	LDI  R30,LOW(0)
000307 c023      	RJMP _0x5E
                 ; 0000 008F             }
                 ; 0000 0090             else if(ldrValue > 0.01 && ldrValue <= 1) {
                 _0x4B:
000308 940e 03ef 	CALL SUBOPT_0xD
00030a f009      	BREQ PC+2
00030b f408      	BRCC PC+2
00030c c006      	RJMP _0x4E
00030d 940e 03f7 	CALL SUBOPT_0xE
00030f f011      	BREQ PC+3
000310 f008      	BRCS PC+2
000311 c001      	RJMP _0x4E
000312 c001      	RJMP _0x4F
                 _0x4E:
000313 c002      	RJMP _0x4D
                 _0x4F:
                 ; 0000 0091                 SPDR = 1;
000314 e0e1      	LDI  R30,LOW(1)
000315 c015      	RJMP _0x5E
                 ; 0000 0092             }
                 ; 0000 0093             else if(ldrValue > 1 && ldrValue <= 2 ) {
                 _0x4D:
000316 940e 03f7 	CALL SUBOPT_0xE
000318 f009      	BREQ PC+2
000319 f408      	BRCC PC+2
00031a c00c      	RJMP _0x52
00031b 940e 03dd 	CALL SUBOPT_0xB
                +
00031d e0e0     +LDI R30 , LOW ( 0x40000000 )
00031e e0f0     +LDI R31 , HIGH ( 0x40000000 )
00031f e060     +LDI R22 , BYTE3 ( 0x40000000 )
000320 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000321 940e 058c 	CALL __CMPF12
000323 f011      	BREQ PC+3
000324 f008      	BRCS PC+2
000325 c001      	RJMP _0x52
000326 c001      	RJMP _0x53
                 _0x52:
000327 c002      	RJMP _0x51
                 _0x53:
                 ; 0000 0094                 SPDR = 2;
000328 e0e2      	LDI  R30,LOW(2)
000329 c001      	RJMP _0x5E
                 ; 0000 0095             }
                 ; 0000 0096             else {
                 _0x51:
                 ; 0000 0097                 SPDR = 3;
00032a e0e3      	LDI  R30,LOW(3)
                 _0x5E:
00032b b9ef      	OUT  0xF,R30
                 ; 0000 0098             }
                 ; 0000 0099             while(((SPSR >> SPIF) & 1) == 0);
                 _0x55:
00032c b1ee      	IN   R30,0xE
00032d 940e 03a1 	CALL SUBOPT_0x3
00032f f3e1      	BREQ _0x55
                 ; 0000 009A             ignore = SPDR;
000330 b08f      	IN   R8,15
                 ; 0000 009B             PORTB |= (1<<PORTB4); // Deselect Slave #2
000331 9ac4      	SBI  0x18,4
                 ; 0000 009C         }
                 ; 0000 009D     }
                 _0x44:
000332 cf5f      	RJMP _0x41
                 ; 0000 009E }
                 _0x58:
000333 cfff      	RJMP _0x58
                 ; .FEND
                 
                 	.DSEG
                 _0x36:
000260           	.BYTE 0x1F
                 ;
                 ;// Function to read from ADC
                 ;float read_adc(){
                 ; 0000 00A1 float read_adc(){
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 00A2     delay_us(10); // Delay needed for the stabilization of the ADC input voltage
                +
000334 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000335 958a     +DEC R24
000336 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 00A3     ADCSRA |= (1 << ADSC); // Start the AD conversion
000337 9a36      	SBI  0x6,6
                 ; 0000 00A4     while ((ADCSRA & (1 << ADIF)) == 0); // Wait for the AD conversion to complete
                 _0x59:
000338 9b34      	SBIS 0x6,4
000339 cffe      	RJMP _0x59
                 ; 0000 00A5     ADCSRA |= (1 << ADIF);
00033a 9a34      	SBI  0x6,4
                 ; 0000 00A6     return ADCW;
00033b b1e4      	IN   R30,0x4
00033c b1f5      	IN   R31,0x4+1
00033d 2766      	CLR  R22
00033e 2777      	CLR  R23
00033f 940e 046f 	CALL __CDF1
000341 9508      	RET
                 ; 0000 00A7 }
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
                 ; 0000 00AA interrupt [12] void timer0_ovf_isr(void){
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000342 936a      	ST   -Y,R22
000343 937a      	ST   -Y,R23
000344 93ea      	ST   -Y,R30
000345 93fa      	ST   -Y,R31
000346 b7ef      	IN   R30,SREG
000347 93ea      	ST   -Y,R30
                 ; 0000 00AB     overflow_count = overflow_count + 1;
000348 940e 03e6 	CALL SUBOPT_0xC
                +
00034a 5fef     +SUBI R30 , LOW ( - 1 )
00034b 4fff     +SBCI R31 , HIGH ( - 1 )
00034c 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00034d 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
00034e 93e0 029c 	STS  _overflow_count,R30
000350 93f0 029d 	STS  _overflow_count+1,R31
000352 9360 029e 	STS  _overflow_count+2,R22
000354 9370 029f 	STS  _overflow_count+3,R23
                 ; 0000 00AC }
000356 91e9      	LD   R30,Y+
000357 bfef      	OUT  SREG,R30
000358 91f9      	LD   R31,Y+
000359 91e9      	LD   R30,Y+
00035a 9179      	LD   R23,Y+
00035b 9169      	LD   R22,Y+
00035c 9518      	RETI
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00035d 93ba      	ST   -Y,R27
00035e 93aa      	ST   -Y,R26
00035f 91a9          ld   r26,y+
000360 91b9          ld   r27,y+
000361 91e9          ld   r30,y+
000362 91f9          ld   r31,y+
000363 9630          adiw r30,0
000364 f42a          brpl __itoa0
000365 95e0          com  r30
000366 95f0          com  r31
000367 9631          adiw r30,1
000368 e26d          ldi  r22,'-'
000369 936d          st   x+,r22
                 __itoa0:
00036a 94e8          clt
00036b e180          ldi  r24,low(10000)
00036c e297          ldi  r25,high(10000)
00036d d00d          rcall __itoa1
00036e ee88          ldi  r24,low(1000)
00036f e093          ldi  r25,high(1000)
000370 d00a          rcall __itoa1
000371 e684          ldi  r24,100
000372 2799          clr  r25
000373 d007          rcall __itoa1
000374 e08a          ldi  r24,10
000375 d005          rcall __itoa1
000376 2f6e          mov  r22,r30
000377 d010          rcall __itoa5
000378 2766          clr  r22
000379 936c          st   x,r22
00037a 9508          ret
                 
                 __itoa1:
00037b 2766          clr	 r22
                 __itoa2:
00037c 17e8          cp   r30,r24
00037d 07f9          cpc  r31,r25
00037e f020          brlo __itoa3
00037f 9563          inc  r22
000380 1be8          sub  r30,r24
000381 0bf9          sbc  r31,r25
000382 f7c9          brne __itoa2
                 __itoa3:
000383 2366          tst  r22
000384 f411          brne __itoa4
000385 f016          brts __itoa5
000386 9508          ret
                 __itoa4:
000387 9468          set
                 __itoa5:
000388 5d60          subi r22,-0x30
000389 936d          st   x+,r22
00038a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _table:
00027f           	.BYTE 0x10
                 _user_password:
00028f           	.BYTE 0x5
                 _pressed_key_ascii:
000294           	.BYTE 0x8
                 _overflow_count:
00029c           	.BYTE 0x4
                 _temperature:
0002a0           	.BYTE 0x4
                 _humidity:
0002a4           	.BYTE 0x4
                 _ldrValue:
0002a8           	.BYTE 0x4
                 __seed_G102:
0002ac           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00038b 93aa      	ST   -Y,R26
00038c b3e2      	IN   R30,0x12
00038d 70ef      	ANDI R30,LOW(0xF)
00038e 2fae      	MOV  R26,R30
00038f 81e8      	LD   R30,Y
000390 7fe0      	ANDI R30,LOW(0xF0)
000391 2bea      	OR   R30,R26
000392 bbe2      	OUT  0x12,R30
000393 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000394 e0a2      	LDI  R26,LOW(2)
000395 e0b0      	LDI  R27,0
000396 940c 03ff 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000398 efe0      	LDI  R30,LOW(240)
000399 bbe5      	OUT  0x15,R30
                +
00039a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00039b 958a     +DEC R24
00039c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00039d b3e3      	IN   R30,0x13
00039e 7fe0      	ANDI R30,LOW(0xF0)
00039f 3fe0      	CPI  R30,LOW(0xF0)
0003a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0003a1 e0f0      	LDI  R31,0
0003a2 940e 05c7 	CALL __ASRW3
0003a4 940e 05c5 	CALL __ASRW4
0003a6 70e1      	ANDI R30,LOW(0x1)
0003a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
0003a8 2fa1      	MOV  R26,R17
0003a9 e0b0      	LDI  R27,0
0003aa e0e2      	LDI  R30,LOW(2)
0003ab e0f0      	LDI  R31,HIGH(2)
0003ac 940e 060b 	CALL __DIVW21
0003ae 2f1e      	MOV  R17,R30
0003af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0003b0 9ad8      	SBI  0x1B,0
0003b1 b3e9      	IN   R30,0x19
0003b2 e0f0      	LDI  R31,0
0003b3 95f5      	ASR  R31
0003b4 95e7      	ROR  R30
0003b5 70e1      	ANDI R30,LOW(0x1)
0003b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x6:
0003b7 e0b0      	LDI  R27,0
0003b8 940e 0184 	CALL _ReadSensor
0003ba 2766      	CLR  R22
0003bb 2777      	CLR  R23
                +
0003bc 8be8     +STD Y + 16 , R30
0003bd 8bf9     +STD Y + 16 + 1 , R31
0003be 8b6a     +STD Y + 16 + 2 , R22
0003bf 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
0003c0 940e 046f 	CALL __CDF1
0003c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
                +
0003c3 89e8     +LDD R30 , Y + 16
0003c4 89f9     +LDD R31 , Y + 16 + 1
0003c5 896a     +LDD R22 , Y + 16 + 2
0003c6 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0003c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
0003c8 e0aa     +LDI R26 , LOW ( 0x3C23D70A )
0003c9 edb7     +LDI R27 , HIGH ( 0x3C23D70A )
0003ca e283     +LDI R24 , BYTE3 ( 0x3C23D70A )
0003cb e39c     +LDI R25 , BYTE4 ( 0x3C23D70A )
                 	__GETD2N 0x3C23D70A
0003cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003cd 940e 04f9 	CALL __MULF12
                +
0003cf e6a6     +LDI R26 , LOW ( 0xC2206666 )
0003d0 e6b6     +LDI R27 , HIGH ( 0xC2206666 )
0003d1 e280     +LDI R24 , BYTE3 ( 0xC2206666 )
0003d2 ec92     +LDI R25 , BYTE4 ( 0xC2206666 )
                 	__GETD2N 0xC2206666
0003d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
0003d4 93e0 02a8 	STS  _ldrValue,R30
0003d6 93f0 02a9 	STS  _ldrValue+1,R31
0003d8 9360 02aa 	STS  _ldrValue+2,R22
0003da 9370 02ab 	STS  _ldrValue+3,R23
0003dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0xB:
0003dd 91a0 02a8 	LDS  R26,_ldrValue
0003df 91b0 02a9 	LDS  R27,_ldrValue+1
0003e1 9180 02aa 	LDS  R24,_ldrValue+2
0003e3 9190 02ab 	LDS  R25,_ldrValue+3
0003e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
0003e6 91e0 029c 	LDS  R30,_overflow_count
0003e8 91f0 029d 	LDS  R31,_overflow_count+1
0003ea 9160 029e 	LDS  R22,_overflow_count+2
0003ec 9170 029f 	LDS  R23,_overflow_count+3
0003ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
0003ef dfed      	RCALL SUBOPT_0xB
                +
0003f0 e0ea     +LDI R30 , LOW ( 0x3C23D70A )
0003f1 edf7     +LDI R31 , HIGH ( 0x3C23D70A )
0003f2 e263     +LDI R22 , BYTE3 ( 0x3C23D70A )
0003f3 e37c     +LDI R23 , BYTE4 ( 0x3C23D70A )
                 	__GETD1N 0x3C23D70A
0003f4 940e 058c 	CALL __CMPF12
0003f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0003f7 dfe5      	RCALL SUBOPT_0xB
                +
0003f8 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0003f9 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0003fa e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0003fb e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0003fc 940e 058c 	CALL __CMPF12
0003fe 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003ff 9610      	adiw r26,0
000400 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000401 ed80     +LDI R24 , LOW ( 0x7D0 )
000402 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000403 9701     +SBIW R24 , 1
000404 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000405 95a8      	wdr
000406 9711      	sbiw r26,1
000407 f7c9      	brne __delay_ms0
                 __delay_ms1:
000408 9508      	ret
                 
                 __ROUND_REPACK:
000409 2355      	TST  R21
00040a f442      	BRPL __REPACK
00040b 3850      	CPI  R21,0x80
00040c f411      	BRNE __ROUND_REPACK0
00040d ffe0      	SBRS R30,0
00040e c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00040f 9631      	ADIW R30,1
000410 1f69      	ADC  R22,R25
000411 1f79      	ADC  R23,R25
000412 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000413 e850      	LDI  R21,0x80
000414 2757      	EOR  R21,R23
000415 f411      	BRNE __REPACK0
000416 935f      	PUSH R21
000417 c0cf      	RJMP __ZERORES
                 __REPACK0:
000418 3f5f      	CPI  R21,0xFF
000419 f031      	BREQ __REPACK1
00041a 0f66      	LSL  R22
00041b 0c00      	LSL  R0
00041c 9557      	ROR  R21
00041d 9567      	ROR  R22
00041e 2f75      	MOV  R23,R21
00041f 9508      	RET
                 __REPACK1:
000420 935f      	PUSH R21
000421 2000      	TST  R0
000422 f00a      	BRMI __REPACK2
000423 c0cf      	RJMP __MAXRES
                 __REPACK2:
000424 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000425 e850      	LDI  R21,0x80
000426 2e19      	MOV  R1,R25
000427 2215      	AND  R1,R21
000428 0f88      	LSL  R24
000429 1f99      	ROL  R25
00042a 2795      	EOR  R25,R21
00042b 0f55      	LSL  R21
00042c 9587      	ROR  R24
                 
                 __UNPACK1:
00042d e850      	LDI  R21,0x80
00042e 2e07      	MOV  R0,R23
00042f 2205      	AND  R0,R21
000430 0f66      	LSL  R22
000431 1f77      	ROL  R23
000432 2775      	EOR  R23,R21
000433 0f55      	LSL  R21
000434 9567      	ROR  R22
000435 9508      	RET
                 
                 __CFD1U:
000436 9468      	SET
000437 c001      	RJMP __CFD1U0
                 __CFD1:
000438 94e8      	CLT
                 __CFD1U0:
000439 935f      	PUSH R21
00043a dff2      	RCALL __UNPACK1
00043b 3870      	CPI  R23,0x80
00043c f018      	BRLO __CFD10
00043d 3f7f      	CPI  R23,0xFF
00043e f408      	BRCC __CFD10
00043f c0a7      	RJMP __ZERORES
                 __CFD10:
000440 e156      	LDI  R21,22
000441 1b57      	SUB  R21,R23
000442 f4aa      	BRPL __CFD11
000443 9551      	NEG  R21
000444 3058      	CPI  R21,8
000445 f40e      	BRTC __CFD19
000446 3059      	CPI  R21,9
                 __CFD19:
000447 f030      	BRLO __CFD17
000448 efef      	SER  R30
000449 efff      	SER  R31
00044a ef6f      	SER  R22
00044b e77f      	LDI  R23,0x7F
00044c f977      	BLD  R23,7
00044d c01a      	RJMP __CFD15
                 __CFD17:
00044e 2777      	CLR  R23
00044f 2355      	TST  R21
000450 f0b9      	BREQ __CFD15
                 __CFD18:
000451 0fee      	LSL  R30
000452 1fff      	ROL  R31
000453 1f66      	ROL  R22
000454 1f77      	ROL  R23
000455 955a      	DEC  R21
000456 f7d1      	BRNE __CFD18
000457 c010      	RJMP __CFD15
                 __CFD11:
000458 2777      	CLR  R23
                 __CFD12:
000459 3058      	CPI  R21,8
00045a f028      	BRLO __CFD13
00045b 2fef      	MOV  R30,R31
00045c 2ff6      	MOV  R31,R22
00045d 2f67      	MOV  R22,R23
00045e 5058      	SUBI R21,8
00045f cff9      	RJMP __CFD12
                 __CFD13:
000460 2355      	TST  R21
000461 f031      	BREQ __CFD15
                 __CFD14:
000462 9576      	LSR  R23
000463 9567      	ROR  R22
000464 95f7      	ROR  R31
000465 95e7      	ROR  R30
000466 955a      	DEC  R21
000467 f7d1      	BRNE __CFD14
                 __CFD15:
000468 2000      	TST  R0
000469 f40a      	BRPL __CFD16
00046a d14a      	RCALL __ANEGD1
                 __CFD16:
00046b 915f      	POP  R21
00046c 9508      	RET
                 
                 __CDF1U:
00046d 9468      	SET
00046e c001      	RJMP __CDF1U0
                 __CDF1:
00046f 94e8      	CLT
                 __CDF1U0:
000470 9730      	SBIW R30,0
000471 4060      	SBCI R22,0
000472 4070      	SBCI R23,0
000473 f0b1      	BREQ __CDF10
000474 2400      	CLR  R0
000475 f026      	BRTS __CDF11
000476 2377      	TST  R23
000477 f412      	BRPL __CDF11
000478 9400      	COM  R0
000479 d13b      	RCALL __ANEGD1
                 __CDF11:
00047a 2e17      	MOV  R1,R23
00047b e17e      	LDI  R23,30
00047c 2011      	TST  R1
                 __CDF12:
00047d f032      	BRMI __CDF13
00047e 957a      	DEC  R23
00047f 0fee      	LSL  R30
000480 1fff      	ROL  R31
000481 1f66      	ROL  R22
000482 1c11      	ROL  R1
000483 cff9      	RJMP __CDF12
                 __CDF13:
000484 2fef      	MOV  R30,R31
000485 2ff6      	MOV  R31,R22
000486 2d61      	MOV  R22,R1
000487 935f      	PUSH R21
000488 df8a      	RCALL __REPACK
000489 915f      	POP  R21
                 __CDF10:
00048a 9508      	RET
                 
                 __SWAPACC:
00048b 934f      	PUSH R20
00048c 01af      	MOVW R20,R30
00048d 01fd      	MOVW R30,R26
00048e 01da      	MOVW R26,R20
00048f 01ab      	MOVW R20,R22
000490 01bc      	MOVW R22,R24
000491 01ca      	MOVW R24,R20
000492 2d40      	MOV  R20,R0
000493 2c01      	MOV  R0,R1
000494 2e14      	MOV  R1,R20
000495 914f      	POP  R20
000496 9508      	RET
                 
                 __UADD12:
000497 0fea      	ADD  R30,R26
000498 1ffb      	ADC  R31,R27
000499 1f68      	ADC  R22,R24
00049a 9508      	RET
                 
                 __NEGMAN1:
00049b 95e0      	COM  R30
00049c 95f0      	COM  R31
00049d 9560      	COM  R22
00049e 5fef      	SUBI R30,-1
00049f 4fff      	SBCI R31,-1
0004a0 4f6f      	SBCI R22,-1
0004a1 9508      	RET
                 
                 __SUBF12:
0004a2 935f      	PUSH R21
0004a3 df81      	RCALL __UNPACK
0004a4 3890      	CPI  R25,0x80
0004a5 f171      	BREQ __ADDF129
0004a6 e850      	LDI  R21,0x80
0004a7 2615      	EOR  R1,R21
                 
0004a8 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0004a9 935f      	PUSH R21
0004aa df7a      	RCALL __UNPACK
0004ab 3890      	CPI  R25,0x80
0004ac f139      	BREQ __ADDF129
                 
                 __ADDF120:
0004ad 3870      	CPI  R23,0x80
0004ae f121      	BREQ __ADDF128
                 __ADDF121:
0004af 2f57      	MOV  R21,R23
0004b0 1b59      	SUB  R21,R25
0004b1 f12b      	BRVS __ADDF1211
0004b2 f412      	BRPL __ADDF122
0004b3 dfd7      	RCALL __SWAPACC
0004b4 cffa      	RJMP __ADDF121
                 __ADDF122:
0004b5 3158      	CPI  R21,24
0004b6 f018      	BRLO __ADDF123
0004b7 27aa      	CLR  R26
0004b8 27bb      	CLR  R27
0004b9 2788      	CLR  R24
                 __ADDF123:
0004ba 3058      	CPI  R21,8
0004bb f028      	BRLO __ADDF124
0004bc 2fab      	MOV  R26,R27
0004bd 2fb8      	MOV  R27,R24
0004be 2788      	CLR  R24
0004bf 5058      	SUBI R21,8
0004c0 cff9      	RJMP __ADDF123
                 __ADDF124:
0004c1 2355      	TST  R21
0004c2 f029      	BREQ __ADDF126
                 __ADDF125:
0004c3 9586      	LSR  R24
0004c4 95b7      	ROR  R27
0004c5 95a7      	ROR  R26
0004c6 955a      	DEC  R21
0004c7 f7d9      	BRNE __ADDF125
                 __ADDF126:
0004c8 2d50      	MOV  R21,R0
0004c9 2551      	EOR  R21,R1
0004ca f072      	BRMI __ADDF127
0004cb dfcb      	RCALL __UADD12
0004cc f438      	BRCC __ADDF129
0004cd 9567      	ROR  R22
0004ce 95f7      	ROR  R31
0004cf 95e7      	ROR  R30
0004d0 9573      	INC  R23
0004d1 f413      	BRVC __ADDF129
0004d2 c020      	RJMP __MAXRES
                 __ADDF128:
0004d3 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0004d4 df3e      	RCALL __REPACK
0004d5 915f      	POP  R21
0004d6 9508      	RET
                 __ADDF1211:
0004d7 f7d8      	BRCC __ADDF128
0004d8 cffb      	RJMP __ADDF129
                 __ADDF127:
0004d9 1bea      	SUB  R30,R26
0004da 0bfb      	SBC  R31,R27
0004db 0b68      	SBC  R22,R24
0004dc f051      	BREQ __ZERORES
0004dd f410      	BRCC __ADDF1210
0004de 9400      	COM  R0
0004df dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0004e0 2366      	TST  R22
0004e1 f392      	BRMI __ADDF129
0004e2 0fee      	LSL  R30
0004e3 1fff      	ROL  R31
0004e4 1f66      	ROL  R22
0004e5 957a      	DEC  R23
0004e6 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0004e7 27ee      	CLR  R30
0004e8 27ff      	CLR  R31
0004e9 2766      	CLR  R22
0004ea 2777      	CLR  R23
0004eb 915f      	POP  R21
0004ec 9508      	RET
                 
                 __MINRES:
0004ed efef      	SER  R30
0004ee efff      	SER  R31
0004ef e76f      	LDI  R22,0x7F
0004f0 ef7f      	SER  R23
0004f1 915f      	POP  R21
0004f2 9508      	RET
                 
                 __MAXRES:
0004f3 efef      	SER  R30
0004f4 efff      	SER  R31
0004f5 e76f      	LDI  R22,0x7F
0004f6 e77f      	LDI  R23,0x7F
0004f7 915f      	POP  R21
0004f8 9508      	RET
                 
                 __MULF12:
0004f9 935f      	PUSH R21
0004fa df2a      	RCALL __UNPACK
0004fb 3870      	CPI  R23,0x80
0004fc f351      	BREQ __ZERORES
0004fd 3890      	CPI  R25,0x80
0004fe f341      	BREQ __ZERORES
0004ff 2401      	EOR  R0,R1
000500 9408      	SEC
000501 1f79      	ADC  R23,R25
000502 f423      	BRVC __MULF124
000503 f31c      	BRLT __ZERORES
                 __MULF125:
000504 2000      	TST  R0
000505 f33a      	BRMI __MINRES
000506 cfec      	RJMP __MAXRES
                 __MULF124:
000507 920f      	PUSH R0
000508 931f      	PUSH R17
000509 932f      	PUSH R18
00050a 933f      	PUSH R19
00050b 934f      	PUSH R20
00050c 2711      	CLR  R17
00050d 2722      	CLR  R18
00050e 2799      	CLR  R25
00050f 9f68      	MUL  R22,R24
000510 01a0      	MOVW R20,R0
000511 9f8f      	MUL  R24,R31
000512 2d30      	MOV  R19,R0
000513 0d41      	ADD  R20,R1
000514 1f59      	ADC  R21,R25
000515 9f6b      	MUL  R22,R27
000516 0d30      	ADD  R19,R0
000517 1d41      	ADC  R20,R1
000518 1f59      	ADC  R21,R25
000519 9f8e      	MUL  R24,R30
00051a d027      	RCALL __MULF126
00051b 9fbf      	MUL  R27,R31
00051c d025      	RCALL __MULF126
00051d 9f6a      	MUL  R22,R26
00051e d023      	RCALL __MULF126
00051f 9fbe      	MUL  R27,R30
000520 d01d      	RCALL __MULF127
000521 9faf      	MUL  R26,R31
000522 d01b      	RCALL __MULF127
000523 9fae      	MUL  R26,R30
000524 0d11      	ADD  R17,R1
000525 1f29      	ADC  R18,R25
000526 1f39      	ADC  R19,R25
000527 1f49      	ADC  R20,R25
000528 1f59      	ADC  R21,R25
000529 2fe3      	MOV  R30,R19
00052a 2ff4      	MOV  R31,R20
00052b 2f65      	MOV  R22,R21
00052c 2f52      	MOV  R21,R18
00052d 914f      	POP  R20
00052e 913f      	POP  R19
00052f 912f      	POP  R18
000530 911f      	POP  R17
000531 900f      	POP  R0
000532 2366      	TST  R22
000533 f02a      	BRMI __MULF122
000534 0f55      	LSL  R21
000535 1fee      	ROL  R30
000536 1fff      	ROL  R31
000537 1f66      	ROL  R22
000538 c002      	RJMP __MULF123
                 __MULF122:
000539 9573      	INC  R23
00053a f24b      	BRVS __MULF125
                 __MULF123:
00053b decd      	RCALL __ROUND_REPACK
00053c 915f      	POP  R21
00053d 9508      	RET
                 
                 __MULF127:
00053e 0d10      	ADD  R17,R0
00053f 1d21      	ADC  R18,R1
000540 1f39      	ADC  R19,R25
000541 c002      	RJMP __MULF128
                 __MULF126:
000542 0d20      	ADD  R18,R0
000543 1d31      	ADC  R19,R1
                 __MULF128:
000544 1f49      	ADC  R20,R25
000545 1f59      	ADC  R21,R25
000546 9508      	RET
                 
                 __DIVF21:
000547 935f      	PUSH R21
000548 dedc      	RCALL __UNPACK
000549 3870      	CPI  R23,0x80
00054a f421      	BRNE __DIVF210
00054b 2011      	TST  R1
                 __DIVF211:
00054c f40a      	BRPL __DIVF219
00054d cf9f      	RJMP __MINRES
                 __DIVF219:
00054e cfa4      	RJMP __MAXRES
                 __DIVF210:
00054f 3890      	CPI  R25,0x80
000550 f409      	BRNE __DIVF218
                 __DIVF217:
000551 cf95      	RJMP __ZERORES
                 __DIVF218:
000552 2401      	EOR  R0,R1
000553 9408      	SEC
000554 0b97      	SBC  R25,R23
000555 f41b      	BRVC __DIVF216
000556 f3d4      	BRLT __DIVF217
000557 2000      	TST  R0
000558 cff3      	RJMP __DIVF211
                 __DIVF216:
000559 2f79      	MOV  R23,R25
00055a 931f      	PUSH R17
00055b 932f      	PUSH R18
00055c 933f      	PUSH R19
00055d 934f      	PUSH R20
00055e 2411      	CLR  R1
00055f 2711      	CLR  R17
000560 2722      	CLR  R18
000561 2733      	CLR  R19
000562 2744      	CLR  R20
000563 2755      	CLR  R21
000564 e290      	LDI  R25,32
                 __DIVF212:
000565 17ae      	CP   R26,R30
000566 07bf      	CPC  R27,R31
000567 0786      	CPC  R24,R22
000568 0741      	CPC  R20,R17
000569 f030      	BRLO __DIVF213
00056a 1bae      	SUB  R26,R30
00056b 0bbf      	SBC  R27,R31
00056c 0b86      	SBC  R24,R22
00056d 0b41      	SBC  R20,R17
00056e 9408      	SEC
00056f c001      	RJMP __DIVF214
                 __DIVF213:
000570 9488      	CLC
                 __DIVF214:
000571 1f55      	ROL  R21
000572 1f22      	ROL  R18
000573 1f33      	ROL  R19
000574 1c11      	ROL  R1
000575 1faa      	ROL  R26
000576 1fbb      	ROL  R27
000577 1f88      	ROL  R24
000578 1f44      	ROL  R20
000579 959a      	DEC  R25
00057a f751      	BRNE __DIVF212
00057b 01f9      	MOVW R30,R18
00057c 2d61      	MOV  R22,R1
00057d 914f      	POP  R20
00057e 913f      	POP  R19
00057f 912f      	POP  R18
000580 911f      	POP  R17
000581 2366      	TST  R22
000582 f032      	BRMI __DIVF215
000583 0f55      	LSL  R21
000584 1fee      	ROL  R30
000585 1fff      	ROL  R31
000586 1f66      	ROL  R22
000587 957a      	DEC  R23
000588 f243      	BRVS __DIVF217
                 __DIVF215:
000589 de7f      	RCALL __ROUND_REPACK
00058a 915f      	POP  R21
00058b 9508      	RET
                 
                 __CMPF12:
00058c 2399      	TST  R25
00058d f09a      	BRMI __CMPF120
00058e 2377      	TST  R23
00058f f042      	BRMI __CMPF121
000590 1797      	CP   R25,R23
000591 f048      	BRLO __CMPF122
000592 f429      	BRNE __CMPF121
000593 17ae      	CP   R26,R30
000594 07bf      	CPC  R27,R31
000595 0786      	CPC  R24,R22
000596 f020      	BRLO __CMPF122
000597 f031      	BREQ __CMPF123
                 __CMPF121:
000598 9498      	CLZ
000599 9488      	CLC
00059a 9508      	RET
                 __CMPF122:
00059b 9498      	CLZ
00059c 9408      	SEC
00059d 9508      	RET
                 __CMPF123:
00059e 9418      	SEZ
00059f 9488      	CLC
0005a0 9508      	RET
                 __CMPF120:
0005a1 2377      	TST  R23
0005a2 f7c2      	BRPL __CMPF122
0005a3 1797      	CP   R25,R23
0005a4 f398      	BRLO __CMPF121
0005a5 f7a9      	BRNE __CMPF122
0005a6 17ea      	CP   R30,R26
0005a7 07fb      	CPC  R31,R27
0005a8 0768      	CPC  R22,R24
0005a9 f388      	BRLO __CMPF122
0005aa f399      	BREQ __CMPF123
0005ab cfec      	RJMP __CMPF121
                 
                 __ADDD21:
0005ac 0fae      	ADD  R26,R30
0005ad 1fbf      	ADC  R27,R31
0005ae 1f86      	ADC  R24,R22
0005af 1f97      	ADC  R25,R23
0005b0 9508      	RET
                 
                 __ANEGW1:
0005b1 95f1      	NEG  R31
0005b2 95e1      	NEG  R30
0005b3 40f0      	SBCI R31,0
0005b4 9508      	RET
                 
                 __ANEGD1:
0005b5 95f0      	COM  R31
0005b6 9560      	COM  R22
0005b7 9570      	COM  R23
0005b8 95e1      	NEG  R30
0005b9 4fff      	SBCI R31,-1
0005ba 4f6f      	SBCI R22,-1
0005bb 4f7f      	SBCI R23,-1
0005bc 9508      	RET
                 
                 __LSLB12:
0005bd 23ee      	TST  R30
0005be 2e0e      	MOV  R0,R30
0005bf 2fea      	MOV  R30,R26
0005c0 f019      	BREQ __LSLB12R
                 __LSLB12L:
0005c1 0fee      	LSL  R30
0005c2 940a      	DEC  R0
0005c3 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0005c4 9508      	RET
                 
                 __ASRW4:
0005c5 95f5      	ASR  R31
0005c6 95e7      	ROR  R30
                 __ASRW3:
0005c7 95f5      	ASR  R31
0005c8 95e7      	ROR  R30
                 __ASRW2:
0005c9 95f5      	ASR  R31
0005ca 95e7      	ROR  R30
0005cb 95f5      	ASR  R31
0005cc 95e7      	ROR  R30
0005cd 9508      	RET
                 
                 __CWD1:
0005ce 2f6f      	MOV  R22,R31
0005cf 0f66      	ADD  R22,R22
0005d0 0b66      	SBC  R22,R22
0005d1 2f76      	MOV  R23,R22
0005d2 9508      	RET
                 
                 __MULD12U:
0005d3 9f7a      	MUL  R23,R26
0005d4 2d70      	MOV  R23,R0
0005d5 9f6b      	MUL  R22,R27
0005d6 0d70      	ADD  R23,R0
0005d7 9ff8      	MUL  R31,R24
0005d8 0d70      	ADD  R23,R0
0005d9 9fe9      	MUL  R30,R25
0005da 0d70      	ADD  R23,R0
0005db 9f6a      	MUL  R22,R26
0005dc 2d60      	MOV  R22,R0
0005dd 0d71      	ADD  R23,R1
0005de 9ffb      	MUL  R31,R27
0005df 0d60      	ADD  R22,R0
0005e0 1d71      	ADC  R23,R1
0005e1 9fe8      	MUL  R30,R24
0005e2 0d60      	ADD  R22,R0
0005e3 1d71      	ADC  R23,R1
0005e4 2788      	CLR  R24
0005e5 9ffa      	MUL  R31,R26
0005e6 2df0      	MOV  R31,R0
0005e7 0d61      	ADD  R22,R1
0005e8 1f78      	ADC  R23,R24
0005e9 9feb      	MUL  R30,R27
0005ea 0df0      	ADD  R31,R0
0005eb 1d61      	ADC  R22,R1
0005ec 1f78      	ADC  R23,R24
0005ed 9fea      	MUL  R30,R26
0005ee 2de0      	MOV  R30,R0
0005ef 0df1      	ADD  R31,R1
0005f0 1f68      	ADC  R22,R24
0005f1 1f78      	ADC  R23,R24
0005f2 9508      	RET
                 
                 __MULD12:
0005f3 d02a      	RCALL __CHKSIGND
0005f4 dfde      	RCALL __MULD12U
0005f5 f40e      	BRTC __MULD121
0005f6 dfbe      	RCALL __ANEGD1
                 __MULD121:
0005f7 9508      	RET
                 
                 __DIVW21U:
0005f8 2400      	CLR  R0
0005f9 2411      	CLR  R1
0005fa e190      	LDI  R25,16
                 __DIVW21U1:
0005fb 0faa      	LSL  R26
0005fc 1fbb      	ROL  R27
0005fd 1c00      	ROL  R0
0005fe 1c11      	ROL  R1
0005ff 1a0e      	SUB  R0,R30
000600 0a1f      	SBC  R1,R31
000601 f418      	BRCC __DIVW21U2
000602 0e0e      	ADD  R0,R30
000603 1e1f      	ADC  R1,R31
000604 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000605 60a1      	SBR  R26,1
                 __DIVW21U3:
000606 959a      	DEC  R25
000607 f799      	BRNE __DIVW21U1
000608 01fd      	MOVW R30,R26
000609 01d0      	MOVW R26,R0
00060a 9508      	RET
                 
                 __DIVW21:
00060b d004      	RCALL __CHKSIGNW
00060c dfeb      	RCALL __DIVW21U
00060d f40e      	BRTC __DIVW211
00060e dfa2      	RCALL __ANEGW1
                 __DIVW211:
00060f 9508      	RET
                 
                 __CHKSIGNW:
000610 94e8      	CLT
000611 fff7      	SBRS R31,7
000612 c002      	RJMP __CHKSW1
000613 df9d      	RCALL __ANEGW1
000614 9468      	SET
                 __CHKSW1:
000615 ffb7      	SBRS R27,7
000616 c006      	RJMP __CHKSW2
000617 95a0      	COM  R26
000618 95b0      	COM  R27
000619 9611      	ADIW R26,1
00061a f800      	BLD  R0,0
00061b 9403      	INC  R0
00061c fa00      	BST  R0,0
                 __CHKSW2:
00061d 9508      	RET
                 
                 __CHKSIGND:
00061e 94e8      	CLT
00061f ff77      	SBRS R23,7
000620 c002      	RJMP __CHKSD1
000621 df93      	RCALL __ANEGD1
000622 9468      	SET
                 __CHKSD1:
000623 ff97      	SBRS R25,7
000624 c00b      	RJMP __CHKSD2
000625 2400      	CLR  R0
000626 95a0      	COM  R26
000627 95b0      	COM  R27
000628 9580      	COM  R24
000629 9590      	COM  R25
00062a 9611      	ADIW R26,1
00062b 1d80      	ADC  R24,R0
00062c 1d90      	ADC  R25,R0
00062d f800      	BLD  R0,0
00062e 9403      	INC  R0
00062f fa00      	BST  R0,0
                 __CHKSD2:
000630 9508      	RET
                 
                 __PUTD1S0:
000631 83e8      	ST   Y,R30
000632 83f9      	STD  Y+1,R31
000633 836a      	STD  Y+2,R22
000634 837b      	STD  Y+3,R23
000635 9508      	RET
                 
                 __SAVELOCR4:
000636 933a      	ST   -Y,R19
                 __SAVELOCR3:
000637 932a      	ST   -Y,R18
                 __SAVELOCR2:
000638 931a      	ST   -Y,R17
000639 930a      	ST   -Y,R16
00063a 9508      	RET
                 
                 __LOADLOCR4:
00063b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00063c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00063d 8119      	LDD  R17,Y+1
00063e 8108      	LD   R16,Y
00063f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  56 r1 :  32 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :   0 r7 :   0 
r8 :   3 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  25 r17:  39 r18:  14 r19:  15 r20:  22 r21:  63 r22:  97 r23:  82 
r24:  73 r25:  58 r26: 104 r27:  58 r28:   7 r29:   1 r30: 258 r31: 106 
x  :   8 y  :  98 z  :  12 
Registers used: 25 out of 35 (71.4%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  32 add   :  20 
adiw  :  12 and   :   3 andi  :  11 asr   :   7 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   2 break :   0 breq  :  31 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   2 brmi  :   9 brne  :  37 brpl  :   8 brsh  :   2 brtc  :   3 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 call  :  78 
cbi   :  18 cbr   :   0 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  35 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :  17 
cp    :   8 cpc   :  13 cpi   :  31 cpse  :   0 dec   :  16 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  26 inc   :   5 jmp   :  23 ld    :  20 ldd   :  35 ldi   : 178 
lds   :  19 lpm   :   7 lsl   :  13 lsr   :   2 mov   :  48 movw  :  27 
mul   :  23 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   5 
ori   :   3 out   :  30 pop   :  26 push  :  26 rcall :  64 ret   :  63 
reti  :   1 rjmp  :  62 rol   :  27 ror   :  19 sbc   :   9 sbci  :  17 
sbi   :  26 sbic  :   0 sbis  :   1 sbiw  :   9 sbr   :   1 sbrc  :   0 
sbrs  :   5 sec   :   4 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  37 std   :  19 sts   :  20 sub   :   6 subi  :  12 swap  :   1 
tst   :  19 wdr   :   1 
Instructions used: 80 out of 116 (69.0%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c80   3096    104   3200   32768   9.8%
[.dseg] 0x000060 0x0002b0      0     80     80    2048   3.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
