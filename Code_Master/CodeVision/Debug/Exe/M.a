;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <mlcd_portd.h>
;#include <io.h>
;#include <delay.h>
;
;#define LCD_Dir  DDRD			/* Define LCD data port direction */
;#define LCD_Port PORTD			/* Define LCD data port */
;#define RS 0					/* Define Register Select pin */
;#define EN 1 					/* Define Enable signal pin */
;
;void LCD_Command(unsigned char cmnd) {
; 0000 0003 void LCD_Command(unsigned char cmnd) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
;PCODE: $0000000F VOL: 0
;	cmnd -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	LCD_Port |= (1<<EN);		/* Enable pulse */
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	delay_us(1);
;PCODE: $0000001B VOL: 0
;	LCD_Port &= ~ (1<<EN);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;	delay_us(200);
;PCODE: $0000001E VOL: 0
;
;	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;	LCD_Port |= (1<<EN);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;	delay_us(1);
;PCODE: $00000028 VOL: 0
;	LCD_Port &= ~ (1<<EN);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;	delay_ms(2);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;}
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;void LCD_Char(unsigned char data) {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
;PCODE: $00000033 VOL: 0
;	data -> Y+0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;	LCD_Port |= (1<<RS);						  /* RS=1, data reg. */
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;	LCD_Port|= (1<<EN);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;	delay_us(1);
;PCODE: $0000003F VOL: 0
;	LCD_Port &= ~ (1<<EN);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;	delay_us(200);
;PCODE: $00000042 VOL: 0
;
;	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;	LCD_Port |= (1<<EN);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;	delay_us(1);
;PCODE: $0000004C VOL: 0
;	LCD_Port &= ~ (1<<EN);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;	delay_ms(2);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;}
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;
;void LCD_Init (void) {				/* LCD Initialize function */
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;	delay_ms(20);					/* LCD Power ON delay always >15ms */
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;	LCD_Command(0x02);				/* send for 4 bit initialization of LCD  */
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;	LCD_Command(0x0c);              /* Display on cursor off*/
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;	LCD_Command(0x01);              /* Clear display screen*/
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;	delay_ms(2);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;}
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;void LCD_String (char *str)	{		/* Send string to LCD function */
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;	int i;
;	for(i=0;str[i]!=0;i++) {		/* Send each char of string till the NULL */
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;	*str -> Y+2
;	i -> R16,R17
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;		LCD_Char (str[i]);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	}
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;}
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;void LCD_String_xy (char row, char pos, char *str) {	/* Send string to LCD with xy position */
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;	if (row == 0 && pos<16)
;PCODE: $0000008D VOL: 0
;	row -> Y+3
;	pos -> Y+2
;	*str -> Y+0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;	LCD_Command((pos & 0x0F)|0x80);						/* Command of first row and required position<16 */
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;	else if (row == 1 && pos<16)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;	LCD_Command((pos & 0x0F)|0xC0);						/* Command of first row and required position<16 */
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;	LCD_String(str);									/* Call LCD string function */
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;}
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;void LCD_Clear() {
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;	LCD_Command (0x01);		/* Clear display */
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;	delay_ms(2);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;	LCD_Command (0x80);		/* Cursor at home position */
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;}
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;#include <keypad.h>
;#include <io.h>
;#include <delay.h>
;
;#define KEY_PORT    PORTC
;#define KEY_DDR     DDRC
;#define KEY_PIN     PINC
;
;#define C1  4
;#define C2  5
;#define C3  6
;#define C4  7
;
;unsigned char table[16] = {
;15, 0, 14, 13,
;1,  2, 3,  12,
;4,  5, 6,  11,
;7,  8, 9,  10};

	.DSEG
;
;// When you want to read a PIN right after writing to PORT you should wait
;const unsigned char Delay = 5;
;
;void keypad_init(void){
; 0000 0004 void keypad_init(void){

	.CSEG
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;    KEY_DDR = 0x0f;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;    KEY_PORT = 0xf0;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;}
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;
;unsigned char key_released(void) {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;    KEY_PORT = 0xf0;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;    delay_us(Delay);
;PCODE: $000000CC VOL: 0
;    if((KEY_PIN & 0xf0) == 0xf0)
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;        return 1;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;    else
;PCODE: $000000D3 VOL: 0
;        return 0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;}
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;
;unsigned char key_pressed(void) {
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;    KEY_PORT = 0xf0;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;    delay_us(Delay);
;PCODE: $000000DD VOL: 0
;    if( (KEY_PIN & 0xf0) != 0xf0 ) { // User presses some key
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;        return 1;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;    }
;    return 0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;}
;PCODE: $000000E7 VOL: 0
;
;unsigned char key_scan(void) {
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;
;    unsigned char i, key;
;    if(key_pressed()){
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;	i -> R17
;	key -> R16
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;        for(i = 0; i < 4; i++){
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;            KEY_PORT = ~(1 << i);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;            delay_us(Delay);
;PCODE: $000000FD VOL: 0
;
;            if(((KEY_PIN >> C1) & 1) == 0)     key = table[i*4];
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;
;            if(((KEY_PIN >> C2) & 1) == 0)     key = table[i*4+1];
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;
;            if(((KEY_PIN >> C3) & 1) == 0)     key = table[i*4+2];
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;
;            if(((KEY_PIN >> C4) & 1) == 0)     key = table[i*4+3];
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;        }
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;        while(!key_released());
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;        return key;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;    }
;
;    else
;PCODE: $0000013A VOL: 0
;        return 255;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;
;}
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;#include <shtxx.h>
;#include <io.h>
;#include <delay.h>
;
;#define SHT_DDR DDRA
;#define SHT_PIN PINA
;#define SHT_PORT PORTA
;#define SHT_SCK_PIN_NO 0
;#define SHT_DATA_PIN_NO 1
;#define MEASURE_TEMP 0x03
;#define MEASURE_HUMI 0x05
;#define RESET        0x1e
;
;void sht_start(void) {
; 0000 0005 void sht_start(void) {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;    SHT_DDR |= (1<<SHT_DATA_PIN_NO); // DATA is output
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;
;    SHT_PORT |= (1<<SHT_DATA_PIN_NO);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;    SHT_PORT |= (1<<SHT_SCK_PIN_NO);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;    SHT_PORT &= ~(1<<SHT_DATA_PIN_NO);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;    SHT_PORT |= (1<<SHT_SCK_PIN_NO);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;    SHT_PORT |= (1<<SHT_DATA_PIN_NO);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;}
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;//##########################################################################
;
;char sht_write(unsigned char Byte) {
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;    unsigned char i, error = 0;
;
;    SHT_DDR |= (1<<SHT_DATA_PIN_NO); // Data is an output
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;	Byte -> Y+2
;	i -> R17
;	error -> R16
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;    delay_us(5);
;PCODE: $00000161 VOL: 0
;    for(i = 0x80; i > 0; i /= 2) {
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;        SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;        if(i & Byte) {
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;            PORTA |= (1<<1);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;            SHT_PORT |= (1<<SHT_DATA_PIN_NO);
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;        }
;        else {
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;            SHT_PORT &= ~(1<<SHT_DATA_PIN_NO);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;        }
;PCODE: $0000017B VOL: 0
;        SHT_PORT |= (1<<SHT_SCK_PIN_NO);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;    }
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;    SHT_DDR &= ~(1<<SHT_DATA_PIN_NO); // DATA is input
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;    SHT_PORT |= (1<<SHT_SCK_PIN_NO);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;    error = (SHT_PIN >> SHT_DATA_PIN_NO) & 1;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;
;    return(error);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;}
;PCODE: $0000019A VOL: 0
;//###################################################
;unsigned char sht_read(unsigned char ack) {
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;    unsigned char i, val = 0;
;
;    SHT_DDR &= ~(1<<SHT_DATA_PIN_NO); // DATA is INPUT
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;	ack -> Y+2
;	i -> R17
;	val -> R16
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;
;    for(i = 0x80; i > 0; i /= 2) {
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;        SHT_PORT |= (1<<SHT_SCK_PIN_NO);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;        if(((SHT_PIN >> SHT_DATA_PIN_NO) & 1) == 1) {
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;            val = val | i;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;        }
;        SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;    }
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;    SHT_DDR |= (1<<SHT_DATA_PIN_NO); // DATA is output
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;    if(ack == 0) {
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;        SHT_PORT |= (1<<SHT_DATA_PIN_NO);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;    }
;    else {
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;        SHT_PORT &= ~(1<<SHT_DATA_PIN_NO);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;    }
;PCODE: $000001D0 VOL: 0
;    SHT_PORT |= (1<<SHT_SCK_PIN_NO);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;    SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;
;    return(val);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;}
;PCODE: $000001DC VOL: 0
;//########################################################
;void connection_reset(void) {
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;    unsigned char i;
;    SHT_DDR |= (1<<SHT_DATA_PIN_NO);
;PCODE: $000001DF VOL: 0
;	i -> R17
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;    SHT_PORT |= (1<<SHT_DATA_PIN_NO);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;    for (i=0;i<9;i++) {
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;        SHT_PORT |= (1<<SHT_SCK_PIN_NO);
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;        delay_us(2);
;PCODE: $000001EF VOL: 0
;        SHT_PORT &= ~(1<<SHT_SCK_PIN_NO);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;        delay_us(2);
;PCODE: $000001F2 VOL: 0
;    }
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;    SHT_PORT |= (1<<SHT_DATA_PIN_NO);
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;    sht_start();
;PCODE: $000001FA VOL: 0
;    delay_ms(100);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;}
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;//####################################################
;void sht_reset() {
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;    sht_start();
;PCODE: $00000203 VOL: 0
;    sht_write(RESET);
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;
;    delay_ms(100);
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;}
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;//#####################################################
;// Read the sensor value. Reg is register to read from
;unsigned int ReadSensor(int Reg) {
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;    unsigned char msb, lsb, crc;
;
;    sht_start();
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;	Reg -> Y+4
;	msb -> R17
;	lsb -> R16
;	crc -> R19
;PCODE: $0000020F VOL: 0
;    sht_write(Reg);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;
;    while(((SHT_PIN >> SHT_DATA_PIN_NO) & 1) == 1);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;
;    msb = sht_read(1);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;    lsb = sht_read(1);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;    crc = sht_read(0);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;
;    return(((unsigned short) msb << 8) | (unsigned short) lsb);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;}
;PCODE: $0000022E VOL: 0
;//######################################################
;float read_sensor(char humidity0temperture1) {
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;    long int income,temp;
;    float out,out0,t;
;    switch(humidity0temperture1) {
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;	humidity0temperture1 -> Y+20
;	income -> Y+16
;	temp -> Y+12
;	out -> Y+8
;	out0 -> Y+4
;	t -> Y+0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;        case 0:
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;            income = ReadSensor(MEASURE_HUMI);
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;            out0=(-2.0468+(0.0367*income)+(-1.5955E-6*(income*income)));
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;            temp=income;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;            delay_ms(500);
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;            ReadSensor(MEASURE_TEMP);
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;            t = -40.1 + 0.01*income;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;            out=(t-25)*(0.01+0.00008*temp)+out0;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;            break;
;PCODE: $00000269 VOL: 0
;        case 1:
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;            income = ReadSensor(MEASURE_TEMP);
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;            out = -40.1 + 0.01*income;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;            break;
;PCODE: $00000279 VOL: 0
;    }
;PCODE: $0000027A VOL: 0
;        return(out);
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;}
;PCODE: $0000027E VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <stdlib.h>
;
;int i,j;
;
;// Variables for password part
;#define PASSWORD_LENGTH 4
;char password[PASSWORD_LENGTH + 1];
;char user_password[PASSWORD_LENGTH + 1];
;
;unsigned char pressed_key_integer;
;char pressed_key_ascii[8];
;
;eeprom char pas[3] = {1,2,3};
;
;// VAriable for T/C
;long int overflow_count = 0;
;
;// VAriable for SPI
;char ignore;
;
;// Variables for ADC
;float temperature;
;float humidity;
;float ldrValue;
;
;float read_adc();
;
;void main(void){
; 0000 0023 void main(void){
;PCODE: $0000027F VOL: 0
; 0000 0024     // LCD initialization
; 0000 0025     DDRD = 0xFF;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0026     LCD_Init();
;PCODE: $00000282 VOL: 0
; 0000 0027 
; 0000 0028     // Keypad initialization
; 0000 0029     keypad_init();
;PCODE: $00000283 VOL: 0
; 0000 002A 
; 0000 002B 
; 0000 002C 
; 0000 002D     while (1) {
;PCODE: $00000284 VOL: 0
; 0000 002E         LCD_Clear();
;PCODE: $00000285 VOL: 0
; 0000 002F         LCD_String("Enter Password:");
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0030         LCD_Command(0xC0); // Go to 2nd line
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0031         for(i = 0; i < PASSWORD_LENGTH; i++) {
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0032             do {
;PCODE: $00000294 VOL: 0
; 0000 0033                 pressed_key_integer = key_scan();
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0034             } while (pressed_key_integer == 255);
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 0035             // sprintf(pressed_key_ascii, "%d", pressed_key_integer);
; 0000 0036             itoa(pressed_key_integer, pressed_key_ascii);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0037             LCD_String(pressed_key_ascii);
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0038             user_password[i] = pressed_key_integer;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0039         }
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 003A         LCD_Clear();
;PCODE: $000002AD VOL: 0
; 0000 003B 
; 0000 003C 
; 0000 003D 
; 0000 003E 
; 0000 003F         if(user_password[0] == 1) {
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0040         if(user_password[1] == 2){
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 0041         if(user_password[2] == 3){
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 0042             LCD_String("System Started");
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0043             delay_ms(300);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0044             LCD_Clear();
;PCODE: $000002BE VOL: 0
; 0000 0045             break;
;PCODE: $000002BF VOL: 0
; 0000 0046         }
; 0000 0047         }
;PCODE: $000002C0 VOL: 0
; 0000 0048 
; 0000 0049         }
;PCODE: $000002C1 VOL: 0
; 0000 004A         else {}
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 004B     }
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 004C 
; 0000 004D     // LDR initialization
; 0000 004E     ADMUX  |= (1 << REFS0); // ADC Voltage Reference: AVCC, cap. on AREF
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 004F     ADMUX  |= (0 << MUX4) | (0 << MUX3) | (0 << MUX2) | (1 << MUX1) | (0 << MUX0); // Select ADC2 Single ended as analog ...
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0050     ADCSRA |= (1 << ADEN); // ADC Enable
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0051     ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0); // ADC Prescalar: 64
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0052 
; 0000 0053     // SHT initialization
; 0000 0054     DDRA = (0<<DDA1) | (1<<DDA0); // Data is input and Clk is output
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 0055     PORTA = (1<<PORTA1) | (0<<PORTA0); // Pull up Data
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0056 
; 0000 0057     // SPI initialization
; 0000 0058     DDRB = (1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB2)| (1<<DDB1);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0059     PORTB = (1<<PORTB4) | (1<<PORTB2)| (1<<DDB1);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 005A     SPCR |= (1<<SPE); // SPI Enable
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 005B     SPCR |= (0<<CPOL); // SPI Clock Polarity: Low
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 005C     SPCR |= (0<<CPHA); // SPI Clock Phase: Leading edge sample / Trailing Edge setup
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 005D     SPCR |= (1<<SPR1) | (1<<SPR0); // SPI Clock Rate: f/128 = 62.5 KHz
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 005E     SPSR |= (0<<SPI2X);
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 005F     SPCR |= (0<<DORD); // SPI Data Order: MSB First
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0060     SPCR |= (1<<MSTR); // SPI Type: Master
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 0061 
; 0000 0062     // T/C initialization
; 0000 0063     TCCR0 = (0<<CS02) | (1<<CS01) | (0<<CS00); // Prescaler = 8 for t/c 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 0064     TCNT0 = 0; // Count from 0 in t/c 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 0065     TIMSK |= (1 << TOIE0); // Enable timer over flow interrupt for t/c 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 0066 
; 0000 0067     #asm("sei"); // Set global interrupt flag
;PCODE: $000002F2 VOL: 0
	sei
;PCODE: $000002F3 VOL: 0
; 0000 0068     while(1) {
;PCODE: $000002F4 VOL: 0
; 0000 0069 
; 0000 006A         // Read necessary data
; 0000 006B         temperature = read_sensor(1); // Read temperature
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 006C         humidity = read_sensor(0); // Read humidity
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 006D         ldrValue = read_adc(); // Read light intensity
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 006E         ldrValue = (ldrValue*5)/1023; // Real voltage value
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 006F         // ldrValue = (500*(5-ldrValue))/ldrValue; // Voltage to resistance
; 0000 0070 
; 0000 0071         // (T(t/c) = prescalar / f(micro) = 8 / 8MHz = 1microSecond)
; 0000 0072         // t/c 0 overflow happens each 2^8 * 1microSecond = 256 microSecond
; 0000 0073         // after 2 seconds t/c overflows 2 second / 256 microsecond = 7812.5 times (overflow_count = 7812)
; 0000 0074         // overflow_count * 256 + TCNT0 = 7812 * 256 + TCNT0 = 2000000 So TCNT0 = 128 = .5 * 256
; 0000 0075         // so when overflow_count = 7812 & TCNT0 = 128 the condition of if will be satisfied
; 0000 0076         if(overflow_count * 256 + TCNT0 >= 1999999) { // 2,000,000 microSecond = 2 second
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 0077             overflow_count = 0;
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 0078             TCNT0 = 0;
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 0079 
; 0000 007A             // Send temperature for slave 3
; 0000 007B             PORTB &= ~(1<<PORTB1); // Select Slave #3
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 007C             SPDR = humidity;
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 007D             while(((SPSR >> SPIF) & 1) == 0);
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 007E             ignore = SPDR;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 007F             PORTB |= (1<<PORTB1); // Deselect Slave #3
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 0080 
; 0000 0081 
; 0000 0082 
; 0000 0083 
; 0000 0084             // Send temperature for slave 1
; 0000 0085             PORTB &= ~(1<<PORTB2); // Select Slave #1
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0086             SPDR = temperature;
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 0087             while(((SPSR >> SPIF) & 1) == 0);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 0088             ignore = SPDR;
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 0089             PORTB |= (1<<PORTB2); // Deselect Slave #1
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 008A 
; 0000 008B             // Send ldrValue for slave 2
; 0000 008C             PORTB &= ~(1<<PORTB4); // Select Slave #2
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 008D             if(ldrValue < 0.01) {
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 008E                 SPDR = 0;
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 008F             }
; 0000 0090             else if(ldrValue > 0.01 && ldrValue <= 1) {
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 0091                 SPDR = 1;
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 0092             }
; 0000 0093             else if(ldrValue > 1 && ldrValue <= 2 ) {
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0000 0094                 SPDR = 2;
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0095             }
; 0000 0096             else {
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0000 0097                 SPDR = 3;
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 0098             }
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 0099             while(((SPSR >> SPIF) & 1) == 0);
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 009A             ignore = SPDR;
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 009B             PORTB |= (1<<PORTB4); // Deselect Slave #2
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 009C         }
; 0000 009D     }
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 009E }
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0

	.DSEG
_0x36:
	.BYTE 0x1F
;
;// Function to read from ADC
;float read_adc(){
; 0000 00A1 float read_adc(){

	.CSEG
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 00A2     delay_us(10); // Delay needed for the stabilization of the ADC input voltage
;PCODE: $0000037A VOL: 0
; 0000 00A3     ADCSRA |= (1 << ADSC); // Start the AD conversion
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 00A4     while ((ADCSRA & (1 << ADIF)) == 0); // Wait for the AD conversion to complete
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 00A5     ADCSRA |= (1 << ADIF);
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 00A6     return ADCW;
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 00A7 }
;PCODE: $00000388 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
; 0000 00AA interrupt [12] void timer0_ovf_isr(void){
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 00AB     overflow_count = overflow_count + 1;
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 00AC }
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
